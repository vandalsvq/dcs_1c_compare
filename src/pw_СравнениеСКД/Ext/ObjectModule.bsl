
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Описание схемы (ТаблицаЗначений) - это настройка используемая при сравнении
//	Таблица			- Строка - имя таблицы, для которой задано описание
//	Раздел			- Строка - имя раздела, к которому относится таблица
//	Основная		- Булево - признак, что данная таблица основная
//	ИмяСтроки		- Строка - представление для строки таблицы
//	Связи			- ТаблицаЗначений - описание связей между таблицами
//		Таблица			- Строка 	- имя связанной таблицы
//		ЕстьВладелец	- Булево 	- признак наличия связи по полю владельцу
//		ПолеВладелец	- Строка 	- имя поля владельца
//		ЭтоТаблица		- Булево	- признак связи Строка - Таблица (иначе Строка - Строка)
//		Поля			- Структура	- правило связи между таблицами
//			Ключ		- имя поля осн. таблицы
//			Значение	- имя поля связанной (строка)
//		Условия			- Структура - условие к строке осн. таблицы 
//			Ключ 		- имя поля осн. таблицы
//			Значение	- значение сравнения (произвольный)
//	Шаблон			- Структура - описание шаблона для вывода информации о строке таблицы
//		Шаблон	- Строка - шаблон строки (СтрШаблон)
//		Поля	- Массив - имена полей используемых в шаблоне, максимум 10
//	ПоляПоиска		- Массив - элементы массива - структуры, где каждый ключ = полю отбора
//	Исключения		- Массив - имена реквизитов, исключаемых при сравнении
//		
Перем ОписаниеСхемы Экспорт;

Перем ТипыСхемы;
Перем ПеречисленияСхемы;

Перем ТипЛюбаяСсылка;
Перем ТипыСсылок;

Перем ИнициализацияСхемы;
Перем ИнициализацияСравнения;

Перем Схема1;
Перем Схема2;
	
#Область ПрограммныйИнтерфейс

Процедура Загрузить() Экспорт
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновки = СхемаИзФайла();
	Если СхемаКомпоновки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗагрузкойСхемы();
	ЗагрузитьИзСхемы(СхемаКомпоновки, ЭтотОбъект.Key);
	ПослеЗагрузкиСхемы();
	
КонецПроцедуры

Процедура Сравнить(знач Значение1, знач Значение2) Экспорт
	
	Схема1 = Значение1;
	Схема2 = Значение2;
	
	//Если НЕ ПроверитьЗаполнение() Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПередСравнениемСхем();
	СравнитьСхемы();
	ПослеСравненияСхем();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСКлючами

Функция НовыйКлюч(знач Значение = Неопределено) Экспорт
	Если Значение = Неопределено Тогда
		Возврат Строка(Новый УникальныйИдентификатор);
	Иначе 
		Возврат КлючХешСуммы(ХешСумма(Значение));
	КонецЕсли;
КонецФункции

Функция ЭтоКлюч(знач Значение) Экспорт
	Возврат ТипЗнч(Значение) = Тип("Строка")
		И НЕ ПустаяСтрока(Значение)
		И ЭтоУникальныйИдентификатор(Значение);
КонецФункции

Функция КлючЗаполнен(знач Значение) Экспорт
	Возврат ЭтоКлюч(Значение) 
		И Значение <> ПустойКлюч();
КонецФункции

Функция ПустойКлюч() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции

Функция КлючХешСуммы(знач Значение) Экспорт
	Возврат НРег(СтрШаблон("%1-%2-%3-%4-%5",
		Сред(Значение, 1, 8),
		Сред(Значение, 9, 4),
		Сред(Значение, 13, 4),
		Сред(Значение, 17, 4),
		Сред(Значение, 21)));
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСхемы

Процедура ПередЗагрузкойСхемы()
	
	ЭтотОбъект.IsReady = Ложь;
	
	ЭтотОбъект.Key = НовыйКлюч();
	
	МетаОбъект = ЭтотОбъект.Метаданные();
	Для Каждого МетаТабЧасть Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаТабЧасть.Имя = "Сравнение" ИЛИ МетаТабЧасть.Имя = "Изменения" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект[МетаТабЧасть.Имя].Очистить();
	КонецЦикла;
	
	Если ИнициализацияСхемы <> Истина Тогда
		ЗаполнитьТаблицуТипов();
		ЗаполнитьТаблицуЗначений();
		ЗаполнитьТипыСсылок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗагрузкиСхемы()
	
	ЭтотОбъект.IsReady = Истина;
		
	ИнициализацияСхемы = Истина;
	
КонецПроцедуры

Процедура ЗагрузитьИзСхемы(знач Схема, знач КлючРодитель)
	
	НаборыИзСхемы(Схема, КлючРодитель);
	ИсточникиИзСхемы(Схема, КлючРодитель);
	ВычисляемыеПоляИзСхемы(Схема, КлючРодитель);
	СвязиНаборовИзСхемы(Схема, КлючРодитель);
	ПоляИтогаИзСхемы(Схема, КлючРодитель);
	ПараметрыИзСхемы(Схема, КлючРодитель);
	МакетыИзСхемы(Схема, КлючРодитель);
	МакетыПолейИзСхемы(Схема, КлючРодитель);
	МакетыГруппировокИзСхемы(Схема, КлючРодитель);
	МакетыЗаголовковГруппировокИзСхемы(Схема, КлючРодитель);
	МакетыПолейИтогаИзСхемы(Схема, КлючРодитель);
	ВложенныеСхемыИзСхемы(Схема, КлючРодитель);
	ВариантыНастроекИзСхемы(Схема, КлючРодитель);
	
КонецПроцедуры

Процедура НаборыИзСхемы(знач Схема, знач КлючРодитель)

	Для Каждого Набор Из Схема.НаборыДанных Цикл
		НаборИзСхемы(Набор, КлючРодитель)
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсточникиИзСхемы(знач Схема, знач КлючРодитель)

	Для Каждого Источник Из Схема.ИсточникиДанных Цикл
		
		СтрокаТаблицы = ЭтотОбъект.ИсточникиДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Источник);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычисляемыеПоляИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "ВыраженияУпорядочивания,ОграничениеИспользования,Оформление"
		+ ",ПараметрыРедактирования,ТипЗначения";
	
	Для Каждого Поле Из Схема.ВычисляемыеПоля Цикл
		СтрокаТаблицы = ЭтотОбъект.ВычисляемыеПоля.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Поле,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.ВыраженияУпорядочивания 	= ВыраженияУпорядочиванияИзСхемы(Поле.ВыраженияУпорядочивания, СтрокаТаблицы.Ключ);
		СтрокаТаблицы.ОграничениеИспользования	= ОграничениеИспользованияИзСхемы(Поле.ОграничениеИспользования);
		СтрокаТаблицы.Оформление				= ОформлениеИзСхемы(Поле.Оформление);
		СтрокаТаблицы.ПараметрыРедактирования	= ПараметрыРедактированияИзСхемы(Поле.ПараметрыРедактирования);
		СтрокаТаблицы.ТипЗначения				= ТипЗначенияИзСхемы(Поле.ТипЗначения);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвязиНаборовИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "";
	
	Для Каждого СвязьДанных Из Схема.СвязиНаборовДанных Цикл
		СтрокаТаблицы = ЭтотОбъект.СвязиНаборов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СвязьДанных,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоляИтогаИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "Группировки";
	
	Для Каждого ПолеИтога Из Схема.ПоляИтога Цикл
		СтрокаТаблицы = ЭтотОбъект.ПоляИтога.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПолеИтога,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.Группировки	= СтрСоединить(ПолеИтога.Группировки, ";");
	КонецЦикла;
	
КонецПроцедуры

Процедура ПараметрыИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "Значение,Использование,ПараметрыРедактирования,ТипЗначения";
	
	Для Каждого Параметр Из Схема.Параметры Цикл
		СтрокаТаблицы = ЭтотОбъект.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Параметр,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.ЗначениеXML				= ЗначениеВСтрокуXML(Параметр.Значение);
		СтрокаТаблицы.Значение					= Строка(Параметр.Значение);
		СтрокаТаблицы.Использование				= КлючПеречисления(Параметр.Использование);
		СтрокаТаблицы.ПараметрыРедактирования	= ПараметрыРедактированияИзСхемы(Параметр.ПараметрыРедактирования);
		СтрокаТаблицы.ТипЗначения				= ТипЗначенияИзСхемы(Параметр.ТипЗначения);
	КонецЦикла;
	
КонецПроцедуры

Процедура МакетыИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "Макет,Параметры";
	
	Для Каждого ОписаниеМакета Из Схема.Макеты Цикл
		СтрокаТаблицы = ЭтотОбъект.Макеты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОписаниеМакета,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.Макет		= МакетОбластиИзСхемы(ОписаниеМакета.Макет);
		СтрокаТаблицы.Параметры	= ПараметрыОбластиИзСхемы(СтрокаТаблицы.Ключ, ОписаниеМакета.Параметры);
	КонецЦикла;
	
КонецПроцедуры

Процедура МакетыПолейИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "";
	
	Для Каждого МакетПолей Из Схема.МакетыПолей Цикл
		СтрокаТаблицы = ЭтотОбъект.МакетыПолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МакетПолей,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
	КонецЦикла;
	
КонецПроцедуры

Процедура МакетыГруппировокИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "ПоляГруппировки,ТипМакета";
	
	Для Каждого МакетГруппировок Из Схема.МакетыГруппировок Цикл
		СтрокаТаблицы = ЭтотОбъект.МакетыГруппировок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МакетГруппировок,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.ПоляГруппировки	= СтрСоединить(МакетГруппировок.ПоляГруппировки, ";");
		СтрокаТаблицы.ТипМакета			= КлючПеречисления(МакетГруппировок.ТипМакета);
	КонецЦикла;
	
КонецПроцедуры

Процедура МакетыЗаголовковГруппировокИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "ПоляГруппировки,ТипМакета";
	
	Для Каждого МакетГруппировок Из Схема.МакетыЗаголовковГруппировок Цикл
		СтрокаТаблицы = ЭтотОбъект.МакетыЗаголовковГруппировок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МакетГруппировок,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.ПоляГруппировки	= СтрСоединить(МакетГруппировок.ПоляГруппировки, ";");
		СтрокаТаблицы.ТипМакета			= КлючПеречисления(МакетГруппировок.ТипМакета);
	КонецЦикла;
	
КонецПроцедуры

Процедура МакетыПолейИтогаИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "ПоляГруппировки1,ПоляГруппировки2,ТипМакета1,ТипМакета2";
	
	Для Каждого МакетПолейИтога Из Схема.МакетыПолейИтога Цикл
		СтрокаТаблицы = ЭтотОбъект.МакетыПолейИтога.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МакетПолейИтога,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.ПоляГруппировки1	= СтрСоединить(МакетПолейИтога.ПоляГруппировки1, ";");
		СтрокаТаблицы.ПоляГруппировки2	= СтрСоединить(МакетПолейИтога.ПоляГруппировки2, ";");
		СтрокаТаблицы.ТипМакета1		= КлючПеречисления(МакетПолейИтога.ТипМакета1);
		СтрокаТаблицы.ТипМакета2		= КлючПеречисления(МакетПолейИтога.ТипМакета2);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВложенныеСхемыИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "Схема,Настройки";
	
	Для Каждого ВложеннаяСхема Из Схема.ВложенныеСхемыКомпоновкиДанных Цикл
		СтрокаТаблицы = ЭтотОбъект.ВложенныеСхемы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВложеннаяСхема,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		ЗагрузитьИзСхемы(ВложеннаяСхема.Схема, СтрокаТаблицы.Ключ);
		
		СтрокаТаблицы.Настройки = НастройкиКомпоновкиИзСхемы(ВложеннаяСхема.Настройки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВариантыНастроекИзСхемы(знач Схема, знач КлючРодитель)

	Исключения = "Настройки";
	
	Для Каждого Вариант Из Схема.ВариантыНастроек Цикл
		СтрокаТаблицы = ЭтотОбъект.ВариантыНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Вариант,, Исключения);
		СтрокаТаблицы.КлючРодитель	= КлючРодитель;
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		
		СтрокаТаблицы.Настройки = НастройкиКомпоновкиИзСхемы(Вариант.Настройки);
	КонецЦикла;
	
	// TODO - НастройкиПоУмолчанию 
	//СтрокаТаблицы = ЭтотОбъект.ВариантыНастроек.Добавить();
	//ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Схема.НастройкиПоУмолчанию,, Исключения);
	//СтрокаТаблицы.КлючРодитель	= КлючРодитель;
	//СтрокаТаблицы.Ключ			= НовыйКлюч();
	//
	//СтрокаТаблицы.Настройки		= НастройкиКомпоновкиИзСхемы(Вариант.Настройки);
	
КонецПроцедуры

#Область НаборыДанных

Процедура НаборИзСхемы(знач Набор, знач КлючРодитель)
	ДанныеКлюча = Новый Структура("Имя,Тип", Набор.Имя, ТипЗнч(Набор));
	КлючНабора	= НовыйКлюч(ДанныеКлюча);
	
	СтрокаТаблицы = ЭтотОбъект.Наборы.Добавить();
	СтрокаТаблицы.КлючРодитель	= КлючРодитель;
	СтрокаТаблицы.Ключ			= КлючНабора;
	СтрокаТаблицы.Картинка		= КартинкаТипа(Набор);
	СтрокаТаблицы.Имя			= Набор.Имя;
	СтрокаТаблицы.Тип			= ИмяТипа(Набор);
	
	Если ТипЗнч(Набор) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		ЗапросИзСхемы(СтрокаТаблицы, Набор);
	ИначеЕсли ТипЗнч(Набор) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		ОбъектИзСхемы(СтрокаТаблицы, Набор);
	ИначеЕсли ТипЗнч(Набор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		ОбъединениеИзСхемы(СтрокаТаблицы, Набор);
	КонецЕсли;
	
	ПоляНабораИзСхемы(СтрокаТаблицы, Набор);
КонецПроцедуры

Процедура ЗапросИзСхемы(знач СтрокаНабора, знач Набор)
	
	СтрокаТаблицы = ЭтотОбъект.Запросы.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Набор);
	СтрокаТаблицы.Ключ = СтрокаНабора.Ключ;
	
КонецПроцедуры

Процедура ОбъектИзСхемы(знач СтрокаНабора, знач Набор)
	
	СтрокаТаблицы = ЭтотОбъект.Объекты.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Набор);
	СтрокаТаблицы.Ключ = СтрокаНабора.Ключ;
	
КонецПроцедуры

Процедура ОбъединениеИзСхемы(знач СтрокаНабора, знач Набор)
	
	СтрокаТаблицы = ЭтотОбъект.Объединения.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Набор);
	СтрокаТаблицы.Ключ = СтрокаНабора.Ключ;
	
	Для Каждого Набор Из Набор.Элементы Цикл
		НаборИзСхемы(Набор, СтрокаТаблицы.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоляНаборовДанных

Процедура ПоляНабораИзСхемы(знач СтрокаНабора, знач Набор)
	
	Для Каждого Поле Из Набор.Поля Цикл
		ДанныеКлюча	= Новый Структура("Набор,Путь,Тип", СтрокаНабора.Ключ, Поле.ПутьКДанным, ТипЗнч(Поле));
		КлючПоля	= НовыйКлюч(ДанныеКлюча);
		
		СтрокаТаблицы = ЭтотОбъект.ПоляНаборов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Поле);
		СтрокаТаблицы.КлючНабора	= СтрокаНабора.Ключ;
		СтрокаТаблицы.Ключ			= КлючПоля;
		СтрокаТаблицы.Тип			= ИмяТипа(Поле);
		
		Если ТипЗнч(Поле) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			ПолеНабораИзСхемы(СтрокаТаблицы, Поле);
		ИначеЕсли ТипЗнч(Поле) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			ПапкаПолейИзСхемы(СтрокаТаблицы, Поле);
		ИначеЕсли ТипЗнч(Поле) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
			ВложенныйНаборИзСхемы(СтрокаТаблицы, Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолеНабораИзСхемы(знач СтрокаПоля, знач Поле)
	
	Исключения = "ВыраженияУпорядочивания,ОграничениеИспользования,ОграничениеИспользованияРеквизитов"
		+ ",Оформление,ПараметрыРедактирования,Роль,ТипЗначения";
	
	СтрокаТаблицы = ЭтотОбъект.ПолеНабора.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Поле,, Исключения);
	СтрокаТаблицы.Ключ = СтрокаПоля.Ключ;
	
	СтрокаТаблицы.ВыраженияУпорядочивания 				= ВыраженияУпорядочиванияИзСхемы(Поле.ВыраженияУпорядочивания, СтрокаТаблицы.Ключ);
	СтрокаТаблицы.ОграничениеИспользования				= ОграничениеИспользованияИзСхемы(Поле.ОграничениеИспользования);
	СтрокаТаблицы.ОграничениеИспользованияРеквизитов	= ОграничениеИспользованияИзСхемы(Поле.ОграничениеИспользованияРеквизитов);
	СтрокаТаблицы.Оформление							= ОформлениеИзСхемы(Поле.Оформление);
	СтрокаТаблицы.ПараметрыРедактирования				= ПараметрыРедактированияИзСхемы(Поле.ПараметрыРедактирования);
	СтрокаТаблицы.Роль									= РольИзСхемы(Поле.Роль);
	СтрокаТаблицы.ТипЗначения							= ТипЗначенияИзСхемы(Поле.ТипЗначения);
	
КонецПроцедуры

Процедура ПапкаПолейИзСхемы(знач СтрокаПоля, знач Поле)
	
	Исключения = "ОграничениеИспользования";
	
	СтрокаТаблицы = ЭтотОбъект.ПапкаПолейНабора.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Поле,, Исключения);
	СтрокаТаблицы.Ключ = СтрокаПоля.Ключ;
	
	СтрокаТаблицы.ОграничениеИспользования = ОграничениеИспользованияИзСхемы(Поле.ОграничениеИспользования);
	
КонецПроцедуры

Процедура ВложенныйНаборИзСхемы(знач СтрокаПоля, знач Поле)
	
	СтрокаТаблицы = ЭтотОбъект.ВложенныйНабор.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Поле);
	СтрокаТаблицы.Ключ = СтрокаПоля.Ключ;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеОбъекты

Функция ВыраженияУпорядочиванияИзСхемы(знач Выражения, знач Ключ = "")
	
	Если НЕ КлючЗаполнен(Ключ) Тогда
		Ключ = НовыйКлюч();
	КонецЕсли;
	
	Для Каждого Выражение Из Выражения Цикл
		СтрокаТаблицы = ЭтотОбъект.ВыраженияУпорядочивания.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выражение,, "ТипУпорядочивания");
		СтрокаТаблицы.Ключ = Ключ;
		
		СтрокаТаблицы.ТипУпорядочивания = КлючПеречисления(Выражение.ТипУпорядочивания);
	КонецЦикла;
	
	Возврат Ключ;
	
КонецФункции

Функция ОграничениеИспользованияИзСхемы(знач Ограничение)
	
	ОтборСтрок = Новый Структура("Группировка,Поле,Порядок,Условие");
	ЗаполнитьЗначенияСвойств(ОтборСтрок, Ограничение);
	МассивСтрок = ЭтотОбъект.ОграниченияИспользования.НайтиСтроки(ОтборСтрок);
	
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТаблицы = ЭтотОбъект.ОграниченияИспользования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОтборСтрок);
		СтрокаТаблицы.Ключ = НовыйКлюч();
		
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЕсли;
	
	Возврат МассивСтрок[0].Ключ;
	
КонецФункции

Функция ОформлениеИзСхемы(знач Значение)
	
	СтрокаXML	= ЗначениеВСтрокуXML(Значение);
	КлючСуммы	= НовыйКлюч(СтрокаXML);
	
	СтрокаТаблицы = ЭтотОбъект.Оформления.Найти(КлючСуммы, "Ключ");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ЭтотОбъект.Оформления.Добавить();
		СтрокаТаблицы.Ключ		= КлючСуммы;
		СтрокаТаблицы.Значение	= СтрокаXML;
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Ключ;
	
КонецФункции

Функция ПараметрыРедактированияИзСхемы(знач Значение)
	
	СтрокаXML	= ЗначениеВСтрокуXML(Значение);
	КлючСуммы	= НовыйКлюч(СтрокаXML);
	
	СтрокаТаблицы = ЭтотОбъект.ПараметрыРедактирования.Найти(КлючСуммы, "Ключ");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ЭтотОбъект.ПараметрыРедактирования.Добавить();
		СтрокаТаблицы.Ключ		= КлючСуммы;
		СтрокаТаблицы.Значение	= СтрокаXML;
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Ключ;
	
КонецФункции

Функция РольИзСхемы(знач Значение)
	
	СтрокаXML	= ЗначениеВСтрокуXML(Значение);
	КлючСуммы	= НовыйКлюч(СтрокаXML);
	
	СтрокаТаблицы = ЭтотОбъект.РолиПолей.Найти(КлючСуммы, "Ключ");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ЭтотОбъект.РолиПолей.Добавить();
		СтрокаТаблицы.Ключ		= КлючСуммы;
		СтрокаТаблицы.Значение	= СтрокаXML;
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Ключ;
	
КонецФункции

Функция ТипЗначенияИзСхемы(знач Значение)
	
	СтрокаXML	= ЗначениеВСтрокуXML(Значение);
	КлючСуммы	= НовыйКлюч(СтрокаXML);
	
	СтрокаТаблицы = ЭтотОбъект.ТипыЗначений.Найти(КлючСуммы, "Ключ");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ЭтотОбъект.ТипыЗначений.Добавить();
		СтрокаТаблицы.Ключ		= КлючСуммы;
		СтрокаТаблицы.Значение	= СтрокаXML;
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Ключ;
	
КонецФункции

Функция МакетОбластиИзСхемы(знач Значение)
	
	СтрокаXML	= ЗначениеВСтрокуXML(Значение);
	КлючСуммы	= НовыйКлюч(СтрокаXML);
	
	СтрокаТаблицы = ЭтотОбъект.МакетыОбласти.Найти(КлючСуммы, "Ключ");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ЭтотОбъект.МакетыОбласти.Добавить();
		СтрокаТаблицы.Ключ		= КлючСуммы;
		СтрокаТаблицы.Значение	= СтрокаXML;
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Ключ;
	
КонецФункции

Функция ПараметрыОбластиИзСхемы(знач Ключ, знач ПараметрыОбласти)
	
	Для Каждого Значение Из ПараметрыОбласти Цикл
		СтрокаТаблицы = ЭтотОбъект.ПараметрыОбласти.Добавить();
		СтрокаТаблицы.Ключ		= Ключ;
		СтрокаТаблицы.Значение	= ЗначениеВСтрокуXML(Значение);
	КонецЦикла;
	
	Возврат Ключ;
	
КонецФункции

Функция ЗначениеXMLИзСхемы(знач Ключ, знач Значение)
	КлючТипа	= КлючТипа(ТипЗнч(Значение));
	СтрокаXML	= ЗначениеВСтрокуXML(Значение);
	КлючСуммы	= НовыйКлюч(СтрокаXML);
	
	СтрокаТаблицы = ЭтотОбъект.Оформления.Найти(КлючСуммы, "Ключ");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ЭтотОбъект.ЗначенияXML.Добавить();
		СтрокаТаблицы.Тип			= КлючТипа;
		СтрокаТаблицы.Ключ			= КлючСуммы;
		СтрокаТаблицы.Значение		= СтрокаXML;
		СтрокаТаблицы.Представление	= Строка(Значение);
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Ключ;
КонецФункции

#КонецОбласти

#Область НастройкиКомпоновки

// TODO
Функция НастройкиКомпоновкиИзСхемы(знач Настройки)
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СравнениеСхем

Процедура ПередСравнениемСхем()
	
	Если ИнициализацияСравнения <> Истина Тогда
		ИнициализироватьОписание();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСравненияСхем()
	
	ИнициализацияСравнения = Истина;
	
КонецПроцедуры

Процедура СравнитьСхемы()
	
	ЭтотОбъект.Сравнение.Очистить();
	ЭтотОбъект.Изменения.Очистить();
	
	Если НЕ Схема1.IsReady Тогда
		Возврат;
	ИначеЕсли НЕ Схема2.IsReady Тогда
		Возврат;
	КонецЕсли;
	
	СравнитьТаблицы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

Процедура Инициализация()

	ИнициализацияСхемы		= Ложь;
	ИнициализацияСравнения	= Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СхемаКомпоновкиДанных
 
Функция СхемаИзФайла()
	
	Если ЭтоРасширениеERF(ЭтотОбъект.Расширение) Тогда
		Схема = СхемаИзERF();
	ИначеЕсли ЭтоРасширениеXML(ЭтотОбъект.Расширение) Тогда
		Схема = СхемаИзXML();
	КонецЕсли;
	
	Возврат Схема;
	
КонецФункции

#КонецОбласти

#Область ОписаниеСхемы

Процедура ИнициализироватьОписание()
	
	ОписаниеСхемы = Новый ТаблицаЗначений;
	ОписаниеСхемы.Колонки.Добавить("Таблица"	, ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОписаниеСхемы.Колонки.Добавить("Раздел"		, ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОписаниеСхемы.Колонки.Добавить("Основная"	, Новый ОписаниеТипов("Булево"));
	ОписаниеСхемы.Колонки.Добавить("ИмяСтроки"	, ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ОписаниеСхемы.Колонки.Добавить("Связи");		// ТаблицаЗначений. см. ШаблонТаблицыСвязи
	ОписаниеСхемы.Колонки.Добавить("Шаблон");		// Структура("Шаблон,Поля", Строка, Массив(Структура(Поле))
	ОписаниеСхемы.Колонки.Добавить("ПоляПоиска");	// Массив 
	ОписаниеСхемы.Колонки.Добавить("Исключения");	// Массив
	ОписаниеСхемы.Колонки.Добавить("Перечисления"); // Структура - Ключ - имя поля, значение - имя коллекции перечисления
	
	#Область Таблицы
	НоваяТаблица("Наборы"			, РазделТаблицы(), НСтр("ru='Набор';en='Dataset'")						, "");
	НоваяТаблица("ИсточникиДанных"	, РазделТаблицы(), НСтр("ru='Источник данных';en='Data source'")		, "");
	НоваяТаблица("ВычисляемыеПоля"	, РазделТаблицы(), НСтр("ru='Вычисляемое поле';en='Calculated field'")	, "");
	
	НоваяТаблица("Запросы"			, РазделБезРаздела()	, НСтр("ru='Запрос';en='Query'")				, "");
	НоваяТаблица("Объекты"			, РазделБезРаздела()	, НСтр("ru='Объект';en='Object'")				, "");
	НоваяТаблица("Объединения"		, РазделБезРаздела()	, НСтр("ru='Объединение';en='Union'")			, "");
	НоваяТаблица("ПоляНаборов"		, РазделБезРаздела()	, НСтр("ru='Поле набора';en='Dataset field'")	, "");
	#КонецОбласти
	
	#Область Связи
	НоваяСвязь("Наборы"			, "Запросы"		, "Ключ=Ключ"			, "Тип=НаборДанныхЗапросСхемыКомпоновкиДанных");
	НоваяСвязь("Наборы"			, "Объекты"		, "Ключ=Ключ"			, "Тип=НаборДанныхОбъектСхемыКомпоновкиДанных");
	НоваяСвязь("Наборы"			, "Объединения"	, "Ключ=Ключ"			, "Тип=НаборДанныхОбъединениеСхемыКомпоновкиДанных");
	
	НоваяСвязь("Наборы"			, "ПоляНаборов"	, "Ключ=КлючНабора"		,,, Истина);
	НоваяСвязь("Наборы"			, "ПоляНаборов"	, "Ключ=КлючНабора"		,,, Истина);
	
	НоваяСвязь("Объединения"	, "Наборы"		, "Ключ=КлючРодитель"	,,, Истина);
	#КонецОбласти
	
	#Область Шаблоны
	НовыйШаблон("Наборы"			, "%1 (%2)"	, "Имя,Тип");
	НовыйШаблон("ИсточникиДанных"	, "%1 (%2)"	, "Имя,ТипИсточникаДанных");
	НовыйШаблон("ВычисляемыеПоля"	, "%1 (%2)"	, "Заголовок,ПутьКДанным");
	#КонецОбласти
	
	#Область Поиск
	НовыйПоиск("Наборы"				, "Ключ;Имя,Тип");
	НовыйПоиск("ИсточникиДанных"	, "Ключ;Имя,ТипИсточникаДанных");
	НовыйПоиск("ВычисляемыеПоля"	, "Ключ;ПутьКДанным");
	
	НовыйПоиск("Запросы"		, "Имя");
	НовыйПоиск("Объекты"		, "Имя;ИмяОбъекта");
	НовыйПоиск("Объединения"	, "Имя");
	#КонецОбласти

КонецПроцедуры

// Добавляет информацию о новой таблице в описание схемы
//
// Параметры:
//	Таблица		- Строка - имя таблицы схемы
//	Раздел		- Строка - имя раздела
//	ИмяСтроки	- Строка - представление строки таблицы
//	Исключения	- Строка - имена полей, не выводимые в таблице (разделитель ,)
//
Процедура НоваяТаблица(знач Таблица, знач Раздел, знач ИмяСтроки, знач Исключения = "")
	
	Исключения = Исключения + ",КлючРодитель,Ключ,Картинка";

	Настройки = НастройкиСхемы(Таблица);
	Настройки.Раздел 		= Раздел;
	Настройки.Основная		= (Раздел = РазделРеквизиты() ИЛИ Раздел = РазделТаблицы());
	Настройки.ИмяСтроки		= ИмяСтроки;
	Настройки.Исключения	= Новый Массив;
	Настройки.Перечисления	= Новый Структура;
	
	Подстроки = СтрРазделить(Исключения, ",", Ложь);
	Для Каждого Имя Из Подстроки Цикл
		Имя = СокрЛП(Имя);
		Если Настройки.Исключения.Найти(Имя) = Неопределено Тогда
			Настройки.Исключения.Добавить(Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет информацию о связи таблиц
//
// Параметры:
//	Таблица1 		- Строка - имя таблицы
//	Таблица2 		- Строка - имя таблицы
//	Поля			- Строка, Массив - описание условия связи по полям Таблица1 и Таблица2
//		Строка 			- условие в формате ИмяПоля1=ИмяПоля2(&ИмяПоля1=ИмяПоля2)
//		Массив 			- элемент массива - Структура("Лево,Право", ИмяПоля1, ИмяПоля2)
//	Условия			- Строка, Структура
//		Строка 			- условие в формате ИмяПоля=Значение(&ИмяПоля=Значение) - значения только Строка
//		Структура		- условие в формате ключ = ИмяПоля, значение = значение отбора
//	ПолеВладелец	- Строка - имя поля владельца данных, если не указано данные будут выведены
//		в отдельный узел если ЭтоТаблица или в корень
//	ЭтоТаблица		- Булево - признак соединения 1 ко многим
//
Процедура НоваяСвязь(знач Таблица1, знач Таблица2, знач Поля, знач Условия = Неопределено, знач ПолеВладелец = "", знач ЭтоТаблица = Ложь)
	
	Настройки = НастройкиСхемы(Таблица1);
	
	ОтборСвязи = Новый Структура("Таблица,ЕстьВладелец", Таблица2, ЗначениеЗаполнено(ПолеВладелец));
	Если ОтборСвязи.ЕстьВладелец Тогда
		ОтборСвязи.Вставить("ПолеВладелец", ПолеВладелец);
	КонецЕсли;
	
	СтрокаСвязи = ПерваяСтрока(Настройки.Связи, ОтборСвязи);
	Если СтрокаСвязи = Неопределено Тогда
		СтрокаСвязи = Настройки.Связи.Добавить();
		СтрокаСвязи.Таблица = Таблица2;
	КонецЕсли;
	
	СтрокаСвязи.ЕстьВладелец	= ЗначениеЗаполнено(ПолеВладелец);
	СтрокаСвязи.ПолеВладелец	= ПолеВладелец;
	СтрокаСвязи.ЭтоТаблица		= ЭтоТаблица;
	СтрокаСвязи.Поля			= Новый Структура;
	СтрокаСвязи.Условия			= Новый Структура;
	
	#Область Условия
	Если ТипЗнч(Условия) = Тип("Строка") Тогда
		МассивУсловий = РазобратьСтрокуУсловий(Условия);
		
		Условия = Новый Структура;
		Для Каждого ЗначениеУсловия Из МассивУсловий Цикл
			Условия.Вставить(ЗначениеУсловия.Лево, ЗначениеУсловия.Право);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЭтоСтруктура(Условия) Тогда
		Условия = Новый Структура;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Условия Цикл
		СтрокаСвязи.Условия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	#КонецОбласти
	
	#Область Поля
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		МассивПолей = РазобратьСтрокуУсловий(Поля);
	ИначеЕсли ТипЗнч(Поля) = Тип("Массив") Тогда
		МассивПолей = Поля;
	КонецЕсли;
	
	Для Каждого ДанныеПолей Из МассивПолей Цикл 
		СтрокаСвязи.Поля.Вставить(ДанныеПолей.Лево, ДанныеПолей.Право);
	КонецЦикла;
	#КонецОбласти
	
КонецПроцедуры

Процедура НовыйШаблон(знач Таблица, знач Шаблон, знач Поля)
	
	Настройки = НастройкиСхемы(Таблица);
	Настройки.Шаблон = Новый Структура("Шаблон,Поля", Шаблон, Новый Массив);
	
	Подстроки = СтрРазделить(Поля, ",", Ложь);
	Для Индекс = 0 По Мин(Подстроки.ВГраница(), 9) Цикл
		ИмяПоля = СокрЛП(Подстроки[Индекс]);
		Настройки.Шаблон.Поля.Добавить(ИмяПоля);
	КонецЦикла;
	
КонецПроцедуры

Процедура НовыйПоиск(знач Таблица, знач Поля)
	
	// Для поиска по полям можно задавать несколько вариантов
	//	Для вариантов разделитель ";", поиск будет выполнен по каждому из вариантов
	//	Для одного варианта разделитель реквизитов ",", поиск будет выполнен по всем реквизитам
	
	Настройки = НастройкиСхемы(Таблица);
	Настройки.ПоляПоиска = Новый Массив;
	
	Подстроки = СтрРазделить(Поля, ";", Ложь);
	Для Каждого ПоляПоиска Из Подстроки Цикл
		МассивПолей = РазделитьСтроку(ПоляПоиска, ",");
		
		ОтборПолей = Новый Структура;
		Для Каждого ИмяПоля Из МассивПолей Цикл
			ОтборПолей.Вставить(ИмяПоля);
		КонецЦикла;
		
		Настройки.ПоляПоиска.Добавить(ОтборПолей);
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонТаблицыСвязи()
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Таблица"		, ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Результат.Колонки.Добавить("ЕстьВладелец"	, Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПолеВладелец"	, ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ЭтоТаблица"		, Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЭтоРеквизиты"	, Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Поля");
	Результат.Колонки.Добавить("Условия");
	
	Возврат Результат;
КонецФункции

Функция НастройкиСхемы(знач ИмяТаблицы)
	Настройки = ПерваяСтрока(ОписаниеСхемы, ИмяТаблицы, "Таблица");
	Если Настройки = Неопределено Тогда
		Настройки = ОписаниеСхемы.Добавить();
		Настройки.Таблица		= ИмяТаблицы;
		Настройки.Связи			= ШаблонТаблицыСвязи();
		Настройки.Шаблон		= Новый Структура("Шаблон,Поля", "", Новый Массив);
		Настройки.ПоляПоиска	= Новый Массив;
		Настройки.Исключения	= Новый Массив;
		Настройки.Перечисления	= Новый Структура;
	КонецЕсли;
	
	Возврат Настройки;
КонецФункции

#КонецОбласти

#Область Сравнение

Функция СравнитьТаблицы()
	
	ТекИзменения = КоллекцияИзменения();
	
	Для Каждого МетаТаблица Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		Настройка = НастройкиСхемы(МетаТаблица.Имя);
		Если Настройка.Раздел <> РазделТаблицы() Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица1	= ТаблицаСхемы(Схема1, МетаТаблица.Имя, Новый Структура("КлючРодитель", Схема1.Key));
		Таблица2	= ТаблицаСхемы(Схема2, МетаТаблица.Имя, Новый Структура("КлючРодитель", Схема2.Key));
		
		СтрокаСравнения = ЭтотОбъект.Сравнение.Добавить();
		СтрокаСравнения.Раздел		= Настройка.Раздел;
		СтрокаСравнения.Родитель	= ПустойКлюч();
		СтрокаСравнения.Ключ		= НовыйКлюч(МетаТаблица.Имя);
		СтрокаСравнения.Таблица		= МетаТаблица.Имя;
		СтрокаСравнения.Синоним		= МетаТаблица.Синоним;
		СтрокаСравнения.ЭтоТабЧасть	= Истина;
		СтрокаСравнения.ПолноеИмя	= МетаТаблица.Имя;
		СтрокаСравнения.Значение1	= ПредставлениеТаблицы(Таблица1);
		СтрокаСравнения.Значение2	= ПредставлениеТаблицы(Таблица2);		
		
		Результат = СравнитьТаблицу(МетаТаблица.Имя, СтрокаСравнения.Ключ, Таблица1, Таблица2);
		СложитьИзменения(ТекИзменения, Результат);
	КонецЦикла;
	
	Возврат ТекИзменения;
	
КонецФункции

Функция СравнитьТаблицу(знач ИмяТаблицы, знач КлючРодитель, знач Таблица1, знач Таблица2) 
	
	ТекИзменения = КоллекцияИзменения();
	
	Настройка = НастройкиСхемы(ИмяТаблицы);
	
	Для Каждого Строка1 Из Таблица1 Цикл
		Строка1.Обработано = Истина;
		Строка2 = НайтиСтрокуТаблицы(ИмяТаблицы, Таблица2, Строка1);
		Если Строка2 <> Неопределено Тогда
			Строка2.Обработано = Истина;
		КонецЕсли;
		
		ПолноеИмя = СтрШаблон("Схема1.%1[%2]", ИмяТаблицы, Формат(Строка1.НомерСтроки, "ЧН=0; ЧГ="));
		
		СтрокаСравнения = ЭтотОбъект.Сравнение.Добавить();
		СтрокаСравнения.Раздел		= Настройка.Раздел;
		СтрокаСравнения.Родитель	= КлючРодитель;
		СтрокаСравнения.Ключ		= НовыйКлюч(ПолноеИмя);
		СтрокаСравнения.Таблица		= ИмяТаблицы;
		СтрокаСравнения.Синоним		= Настройка.ИмяСтроки;
		СтрокаСравнения.ЭтоТабЧасть	= Истина;
		СтрокаСравнения.ЭтоСтрока	= Истина;
		СтрокаСравнения.Строка1		= Строка1.НомерСтроки;
		СтрокаСравнения.Строка2		= ?(Строка2 = Неопределено, 0, Строка2.НомерСтроки);
		СтрокаСравнения.ПолноеИмя	= ПолноеИмя;
		СтрокаСравнения.Значение1	= ПредставлениеСтроки(ИмяТаблицы, Строка1);
		СтрокаСравнения.Значение2	= ПредставлениеСтроки(ИмяТаблицы, Строка2);
		
		Результат = СравнитьСтроку(ИмяТаблицы, СтрокаСравнения.Ключ, Строка1, Строка2);
		СложитьИзменения(ТекИзменения, Результат);
	КонецЦикла;
	
	ОтборСтрок	= Новый Структура("Обработано", Ложь);
	МассивСтрок	= Таблица2.НайтиСтроки(ОтборСтрок);
	Для Каждого Строка2 Из МассивСтрок Цикл
		Строка1	= Неопределено;
		
		ПолноеИмя = СтрШаблон("Схема2.%1[%2]", ИмяТаблицы, Формат(Строка2.НомерСтроки, "ЧН=0; ЧГ="));
		
		СтрокаСравнения = ЭтотОбъект.Сравнение.Добавить();
		СтрокаСравнения.Раздел		= РазделТаблицы();
		СтрокаСравнения.Родитель	= КлючРодитель;
		СтрокаСравнения.Ключ		= НовыйКлюч(ПолноеИмя);
		СтрокаСравнения.Таблица		= ИмяТаблицы;
		СтрокаСравнения.Синоним		= Настройка.ИмяСтроки;
		СтрокаСравнения.ЭтоТабЧасть	= Истина;
		СтрокаСравнения.ЭтоСтрока	= Истина;
		СтрокаСравнения.Строка1		= 0;
		СтрокаСравнения.Строка2		= Строка2.НомерСтроки;
		СтрокаСравнения.ПолноеИмя	= ПолноеИмя;
		СтрокаСравнения.Значение1	= ПредставлениеСтроки(ИмяТаблицы, Строка1);
		СтрокаСравнения.Значение2	= ПредставлениеСтроки(ИмяТаблицы, Строка2);
		
		Результат = СравнитьСтроку(ИмяТаблицы, СтрокаСравнения.Ключ, Строка1, Строка2);
		СложитьИзменения(ТекИзменения, Результат);
	КонецЦикла;
	
	ЗаписатьИзменения(КлючРодитель, ТекИзменения);
	
	Возврат ТекИзменения;
	
КонецФункции

Функция СравнитьСтроку(знач ИмяТаблицы, знач КлючРодитель, знач Строка1, знач Строка2)

	ТекИзменения = КоллекцияИзменения();
	
	Если НЕ Строка1 = Неопределено Тогда
		ПолноеИмя = СтрШаблон("Схема1.%1[%2].", ИмяТаблицы, Формат(Строка1.НомерСтроки, "ЧН=0; ЧГ="));
	ИначеЕсли НЕ Строка2 = Неопределено Тогда
		ПолноеИмя = СтрШаблон("Схема2.%1[%2].", ИмяТаблицы, Формат(Строка2.НомерСтроки, "ЧН=0; ЧГ="));
	Иначе 
		Возврат ТекИзменения;
	КонецЕсли;
	
	Настройка = НастройкиСхемы(ИмяТаблицы);
	
	Для Каждого МетаРеквизит Из ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТаблицы].Реквизиты Цикл
		Если Настройка.Исключения.Найти(МетаРеквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Данные1	= ДанныеРеквизитаСтроки(Строка1, МетаРеквизит.Имя);
		Данные2	= ДанныеРеквизитаСтроки(Строка2, МетаРеквизит.Имя);
		
		СтрокаСравнения = ЭтотОбъект.Сравнение.Добавить();
		СтрокаСравнения.Раздел				= Настройка.Раздел;
		СтрокаСравнения.Родитель			= КлючРодитель;
		СтрокаСравнения.Ключ				= НовыйКлюч(ПолноеИмя + МетаРеквизит.Имя);
		СтрокаСравнения.Таблица				= ИмяТаблицы;
		СтрокаСравнения.Реквизит			= МетаРеквизит.Имя;
		СтрокаСравнения.Синоним				= МетаРеквизит.Синоним;
		СтрокаСравнения.ЭтоТабЧасть			= Истина;
		СтрокаСравнения.ЭтоСтрока			= Истина;
		СтрокаСравнения.ЭтоРеквизит			= Истина;
		СтрокаСравнения.МногострочныйРежим	= МетаРеквизит.МногострочныйРежим;
		СтрокаСравнения.Строка1				= ?(Строка1 = Неопределено, 0, Строка1.НомерСтроки);
		СтрокаСравнения.Строка2				= ?(Строка2 = Неопределено, 0, Строка2.НомерСтроки);
		СтрокаСравнения.ПолноеИмя			= ПолноеИмя + МетаРеквизит.Имя;
		СтрокаСравнения.Значение1			= Данные1.Представление;
		СтрокаСравнения.Значение2			= Данные2.Представление;
		//СтрокаСравнения.ЭтоКлюч				= СтрокаРеквизита.ЭтоКлюч;

		//ЗаполнитьРеквизитыИзменений(СтрокаСравнения, Данные1.Значение, Данные2.Значение, МетаРеквизит.МногострочныйРежим);
		//
		//Если СтрокаСравнения.ВидИзменений = 1 Тогда
		//	ТекИзменения.ЕстьНовые = Истина;
		//ИначеЕсли СтрокаСравнения.ВидИзменений = 2 Тогда
		//	ТекИзменения.ЕстьУдаленные = Истина;
		//ИначеЕсли СтрокаСравнения.ВидИзменений = 3 Тогда
		//	ТекИзменения.ЕстьИзменения = Истина;
		//КонецЕсли;
		//
		//Результат = СравнитьПодчиненныеТаблицы(ИмяТаблицы, СтрокаСравнения, СтрокаРеквизита.Имя, Строка1, Строка2);
		//СложитьИзменения(ТекИзменения, Результат);
	КонецЦикла;
	
	//Результат = СравнитьВложенныеТаблицы(ИмяТаблицы, КлючРодитель, Строка1, Строка2);
	//СложитьИзменения(ТекИзменения, Результат);
	//
	//ЗаписатьИзменения(КлючРодитель, Изменения);
	
	Возврат ТекИзменения;
	
КонецФункции


#КонецОбласти

#Область Изменения

Процедура ЗаписатьИзменения(знач КлючРодитель, знач ТекИзменения)
	Если ТекИзменения.ЕстьНовые = Неопределено И ТекИзменения.ЕстьУдаленные = Неопределено И ТекИзменения.ЕстьИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСравнения = ЭтотОбъект.Сравнение.Найти(КлючРодитель, "Ключ");
	СтрокаИзменений = ЭтотОбъект.Изменения.Найти(КлючРодитель, "Родитель");
	Если СтрокаИзменений = Неопределено Тогда
		СтрокаИзменений = ЭтотОбъект.Изменения.Добавить();
		СтрокаИзменений.Родитель = КлючРодитель;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ТекИзменения Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИзменений[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	Если СтрокаСравнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаСравнения, СтрокаИзменений, "ЕстьНовые,ЕстьУдаленные,ЕстьИзменения");
		
		СтрокаСравнения.ЕстьОтличия = СтрокаИзменений.ЕстьНовые
			ИЛИ СтрокаИзменений.ЕстьУдаленные
			ИЛИ СтрокаСравнения.ЕстьИзменения;
	КонецЕсли;
КонецПроцедуры

Процедура СложитьИзменения(знач Изменения1, знач Изменения2)
	Для Каждого КлючИЗначение Из Изменения2 Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Изменения1[КлючИЗначение.Ключ] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Изменения1[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
КонецПроцедуры

Функция КоллекцияИзменения()
	
	Возврат Новый Структура("ЕстьНовые,ЕстьУдаленные,ЕстьИзменения");
	
КонецФункции

#КонецОбласти

#Область ТаблицыСхемы

Процедура ПодготовитьТаблицу(знач Схема, знач ИмяТаблицы, знач ТаблицаДанных)
	
	//Настройка = НастройкиСхемы(ИмяТаблицы);
	
КонецПроцедуры

Функция ТаблицаСхемы(знач Схема, знач ИмяТаблицы, знач Отбор = Неопределено)
	
	Если ЭтоСтруктура(Отбор) Тогда
		МассивСтрок = Схема[ИмяТаблицы].НайтиСтроки(Отбор);
	Иначе 
		МассивСтрок = Схема[ИмяТаблицы];
	КонецЕсли;
	
	ТаблицаДанных = Схема[ИмяТаблицы].ВыгрузитьКолонки();
	ТаблицаДанных.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
	КонецЦикла;
	
	ПодготовитьТаблицу(Схема, ИмяТаблицы, ТаблицаДанных);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция НайтиСтрокуТаблицы(знач ИмяТаблицы, знач ТаблицаПоиск, знач СтрокаДанных)
	Настройка = НастройкиСхемы(ИмяТаблицы);
	
	Для Каждого Отбор Из Настройка.ПоляПоиска Цикл
		КопияОтбор = Новый Структура(Новый ФиксированнаяСтруктура(Отбор));
		ЗаполнитьЗначенияСвойств(КопияОтбор, СтрокаДанных);
		КопияОтбор.Вставить("Обработано", Ложь);
		
		Строка2 = ПерваяСтрока(ТаблицаПоиск, КопияОтбор);
		Если Строка2 <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Строка2;
КонецФункции

Функция ПредставлениеТаблицы(знач Таблица)
	
	Возврат СтрШаблон(НСтр("ru='Строки: %1';en='Rows: %1'"),
		Формат(Таблица.Количество(), "ЧН=0; ЧГ="));
	
КонецФункции

Функция ПредставлениеСтроки(знач ИмяТаблицы, знач Строка)
	Если Строка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Настройка = НастройкиСхемы(ИмяТаблицы);
	
	Если НЕ ЭтоСтруктура(Настройка.Шаблон)
		ИЛИ НЕ ЗначениеЗаполнено(Настройка.Шаблон) Тогда
		
		Возврат СтрШаблон(НСтр("ru='Строка %1';en='Row %1'"), Формат(Строка.НомерСтроки, "ЧГ="));
		
	КонецЕсли;

	Значения = Новый Массив(10);
	Для Индекс = 0 По Настройка.Шаблон.Поля.ВГраница() Цикл
		ИмяЗначения		= Настройка.Шаблон.Поля[Индекс];
		ДанныеРеквизита	= ДанныеРеквизитаСтроки(Строка, ИмяЗначения);
		
		Значения[Индекс] = ДанныеРеквизита.Представление;
	КонецЦикла;
	
	Возврат СтрШаблон(Настройка.Шаблон.Шаблон, Значения[0], Значения[1], Значения[2], Значения[3],
		Значения[4], Значения[5], Значения[6], Значения[7], Значения[8], Значения[9]);
КонецФункции

Функция ДанныеРеквизитаСтроки(знач Строка, знач ИмяРеквизита)
	Результат = Новый Структура("Значение,Представление", Неопределено, "");
	
	Если Строка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Синоним	= "_" + ИмяРеквизита;
	Ключи	= СтрШаблон("%1,%2", ИмяРеквизита, Синоним);
	Данные	= Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(Данные, Строка);
	
	Результат.Значение		= Данные[ИмяРеквизита];
	Результат.Представление	= Данные[Синоним];
	Результат.Представление	= ?(ЗначениеЗаполнено(Результат.Представление), Результат.Представление, Строка(Результат.Значение));
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Разделы

Функция РазделРеквизиты()
	Возврат "Реквизиты";
КонецФункции

Функция РазделТаблицы()
	Возврат "Таблицы";
КонецФункции

Функция РазделБезРаздела()
	Возврат "БезРаздела";
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

Функция СхемаИзXML()		
	Чтение = Новый ЧтениеXML;
	
	Результат = ПолучитьИзВременногоХранилища(ЭтотОбъект.АдресСхемы);
	Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		Данные = Результат.ОткрытьПотокДляЧтения();
		Чтение.ОткрытьПоток(Данные);
	ИначеЕсли ЭтоСтрокаXML(Результат) Тогда
		Чтение.УстановитьСтроку(Результат);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(Чтение, Тип("СхемаКомпоновкиДанных"));
	Чтение.Закрыть();
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция СхемаИзERF()
	Результат = ПодключитьВнешнийОтчет(ЭтотОбъект.АдресСхемы);
	Если НЕ ПроверитьПодключениеОтчета(Результат, Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтчетОбъект = ВнешниеОтчеты.Создать(Результат.Имя);
	Возврат ОтчетОбъект.СхемаКомпоновкиДанных;
КонецФункции

Функция ПодключитьВнешнийОтчет(знач АдресХранилища, знач ВБезопасномРежиме = Истина)
	Результат = Новый Структура("Выполнено,Имя,ТекстОшибки,Информация",
		Ложь, "", "", Неопределено);
		
	Попытка
		Результат.Выполнено = Истина;
		Результат.Имя = ВнешниеОтчеты.Подключить(АдресХранилища,,
			ВБезопасномРежиме,
			ОписаниеЗащитыБезПредупреждений());
	Исключение
		Результат.Выполнено		= Ложь;
		Результат.Информация	= ИнформацияОбОшибке();
		Результат.ТекстОшибки	= ПодробноеПредставлениеОшибки(Результат.Информация);
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ОписаниеЗащитыБезПредупреждений()
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	Возврат ОписаниеЗащиты;
КонецФункции

Функция ПроверитьПодключениеОтчета(знач Результат, знач ВыдатьИсключение = Ложь)
	Если Результат.Выполнено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВыдатьИсключение Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='При подключении отчета произошла ошибка: %1';
			|en='An error occurred while connecting the external report: %1'"),
			Символы.ПС + Результат.ТекстОшибки);
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область РаботаСXML

Функция ЭтоСтрокаXML(Текст) Экспорт
	
	Возврат ТипЗнч(Текст) = Тип("Строка")
		И СтрНачинаетсяС(СокрЛ(Текст), "<")
		И СтрЗаканчиваетсяНа(СокрП(Текст), ">");
	
КонецФункции

#КонецОбласти

#Область РаботаСТипами

Процедура ЗаполнитьТаблицуТипов()
	
	ТипыСхемы = Новый ТаблицаЗначений;
	ТипыСхемы.Колонки.Добавить("Ключ"			, ОписаниеТиповСтрока(36));
	ТипыСхемы.Колонки.Добавить("Имя"			, ОписаниеТиповСтрока(150));
	ТипыСхемы.Колонки.Добавить("Представление"	, ОписаниеТиповСтрока());
	ТипыСхемы.Колонки.Добавить("Картинка"		, ОписаниеТиповСтрока(50));
	ТипыСхемы.Колонки.Добавить("Тип");
	
	// наборы данных
	СтрокаТипа("НаборДанныхЗапросСхемыКомпоновкиДанных"			, "png_dataset_query");
	СтрокаТипа("НаборДанныхОбъектСхемыКомпоновкиДанных"			, "png_dataset_object");
	СтрокаТипа("НаборДанныхОбъединениеСхемыКомпоновкиДанных"	, "png_dataset_join");
	
	// поля наборов данных
	СтрокаТипа("ПолеНабораДанныхСхемыКомпоновкиДанных");
	СтрокаТипа("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных");
	СтрокаТипа("ВложенныйНаборДанныхСхемыКомпоновкиДанных");
	
	// вспомогательные типы
	СтрокаТипа("ОформлениеКомпоновкиДанных");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуЗначений()
	
	ПеречисленияСхемы = Новый ТаблицаЗначений;
	ПеречисленияСхемы.Колонки.Добавить("Ключ"			, ОписаниеТиповСтрока(36));
	ПеречисленияСхемы.Колонки.Добавить("Представление"	, ОписаниеТиповСтрока());
	ПеречисленияСхемы.Колонки.Добавить("Значение");
	
	ДобавитьСтрокиЗначений(НаправлениеСортировкиКомпоновкиДанных);
	ДобавитьСтрокиЗначений(ИспользованиеПараметраКомпоновкиДанных);
	ДобавитьСтрокиЗначений(ТипМакетаОбластиКомпоновкиДанных);
	
КонецПроцедуры

Процедура ДобавитьСтрокиЗначений(знач Источник)
	
	Для Каждого Значение Из Источник Цикл
		КлючПеречисления(Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТипыСсылок()
	
	ТипыСсылок = Новый Структура;
	ТипыСсылок.Вставить("Справочники"					, Справочники.ТипВсеСсылки());
	ТипыСсылок.Вставить("Документы"						, Документы.ТипВсеСсылки());
	ТипыСсылок.Вставить("Перечисления"					, Перечисления.ТипВсеСсылки());
	ТипыСсылок.Вставить("ПланыВидовХарактеристик"		, ПланыВидовХарактеристик.ТипВсеСсылки());
	ТипыСсылок.Вставить("ПланыСчетов"					, ПланыСчетов.ТипВсеСсылки());
	ТипыСсылок.Вставить("ПланыВидовРасчета"				, ПланыВидовРасчета.ТипВсеСсылки());
	ТипыСсылок.Вставить("БизнесПроцессы"				, БизнесПроцессы.ТипВсеСсылки());
	ТипыСсылок.Вставить("Задачи"						, Задачи.ТипВсеСсылки());
	ТипыСсылок.Вставить("ПланыОбмена"					, ПланыОбмена.ТипВсеСсылки());
	ТипыСсылок.Вставить("ТочкиМаршрутаБизнесПроцессов"	, БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов());
	
	ТипЛюбаяСсылка = Новый ОписаниеТипов;
	Для Каждого КлючИЗначение Из ТипыСсылок Цикл
		ТипЛюбаяСсылка = Новый ОписаниеТипов(ТипЛюбаяСсылка, КлючИЗначение.Значение.Типы());
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаТипа(знач Значение, знач Картинка = "")
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ТипЗначения	= Тип(Значение);
		ИмяЗначения = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
		ТипЗначения = Значение;
		ИмяЗначения = НовыйКлюч(ТипЗначения);
	КонецЕсли;
	
	СтрокаТипа = ТипыСхемы.Найти(ТипЗначения, "Тип");
	Если СтрокаТипа = Неопределено Тогда
		СтрокаТипа = ТипыСхемы.Добавить();
		СтрокаТипа.Ключ				= НовыйКлюч(ТипЗначения);
		СтрокаТипа.Имя				= ИмяЗначения;
		СтрокаТипа.Картинка			= Картинка;
		СтрокаТипа.Тип				= ТипЗначения;
		СтрокаТипа.Представление	= Строка(ТипЗначения);
	КонецЕсли;
	
	Возврат СтрокаТипа;
КонецФункции

Функция ИмяТипа(знач Значение)
	СтрокаТипа = СтрокаТипа(ТипЗнч(Значение));
	Возврат СтрокаТипа.Имя;
КонецФункции

Функция КлючТипа(знач Значение)
	СтрокаТипа = СтрокаТипа(ТипЗнч(Значение));
	Возврат СтрокаТипа.Ключ;
КонецФункции

Функция КартинкаТипа(знач Значение)
	ТипЗначения	= ТипЗнч(Значение);
	СтрокаТипа	= ТипыСхемы.Найти(ТипЗначения, "Тип");
	Возврат ?(СтрокаТипа = Неопределено, "", СтрокаТипа.Картинка);
КонецФункции

Функция КлючПеречисления(знач Значение)
	
	СтрокаТаблицы = ПеречисленияСхемы.Найти(Значение, "Значение");
	
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ПеречисленияСхемы.Добавить();
		СтрокаТаблицы.Ключ			= НовыйКлюч();
		СтрокаТаблицы.Представление	= Строка(Значение);
		СтрокаТаблицы.Значение		= Значение;
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Ключ;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Процедура СообщитьПользователю( 
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь)
	
	ЭтоОбъект = Ложь;
	
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Функция ОписаниеТиповСтрока(знач Длина = 0)
	Возврат Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(Длина));
КонецФункции

Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция ЭтоУникальныйИдентификатор(Знач Значение) Экспорт
	
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Позиция = 1 По СтрДлина(Значение) Цикл
		Если КодСимвола(Шаблон, Позиция) = 88 // X
			И ((КодСимвола(Значение, Позиция) < 48 Или КодСимвола(Значение, Позиция) > 57) // 0..9
			И (КодСимвола(Значение, Позиция) < 97 Или КодСимвола(Значение, Позиция) > 102) // a..f
			И (КодСимвола(Значение, Позиция) < 65 Или КодСимвола(Значение, Позиция) > 70)) // A..F
			Или КодСимвола(Шаблон, Позиция) = 45 И КодСимвола(Значение, Позиция) <> 45 Тогда // -
				Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция ЭтоРасширениеXML(знач Значение)
	Возврат СтрНайти(".xml;", НормализоватьРасширение(Значение)) > 0;
КонецФункции

Функция ЭтоРасширениеERF(знач Значение)
	Возврат СтрНайти(".erf;", НормализоватьРасширение(Значение)) > 0;
КонецФункции

Функция ЭтоСоответствие(знач Значение) Экспорт
	ТипЗначения = ТипЗнч(Значение);
	Возврат ТипЗначения = Тип("Соответствие") ИЛИ ТипЗначения = Тип("ФиксированноеСоответствие");
КонецФункции

Функция ЭтоСтруктура(знач Значение) Экспорт
	ТипЗначения = ТипЗнч(Значение);
	Возврат ТипЗначения = Тип("Структура") ИЛИ ТипЗначения = Тип("ФиксированнаяСтруктура");
КонецФункции

Функция ЭтоМассив(знач Значение) Экспорт
	ТипЗначения = ТипЗнч(Значение);
	Возврат ТипЗначения = Тип("Массив") ИЛИ ТипЗначения = Тип("ФиксированныйМассив");
КонецФункции

Функция НормализоватьРасширение(знач Значение)
	Значение = НРег(СокрЛП(Значение));
	Возврат ?(СтрНачинаетсяС(Значение, "."), "", ".")
		+ Значение
		+ ?(СтрЗаканчиваетсяНа(Значение, ";"), "", ";");
КонецФункции

Функция ЗначениеВСтрокуXML(Значение)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ЗначениеИзСтрокиXML(СтрокаXML)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Функция ХешСумма(Знач Данные, Знач Алгоритм = Неопределено)
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);
	
	Если ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("ДвоичныеДанные") Тогда 
		Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	ИначеЕсли ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("Число") Тогда
		Результат = Формат(ХешированиеДанных.ХешСумма, "ЧГ=");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПерваяСтрока(знач Таблица, знач Значение, знач Ключ = "")
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		ОтборСтрок = Значение;
	ИначеЕсли ЗначениеЗаполнено(Ключ) Тогда 
		ОтборСтрок = Новый Структура(Ключ, Значение);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок	= Таблица.НайтиСтроки(ОтборСтрок);
	Возврат ?(МассивСтрок.Количество() = 0, Неопределено, МассивСтрок[0]);
КонецФункции

Функция РазобратьСтрокуУсловий(знач Строка)
	Результат = Новый Массив;
	
    Подстроки = СтрРазделить(Строка, "&", Ложь);
	Для Каждого Значение Из Подстроки Цикл 
		Значение = СокрЛП(Значение);
		МассивПолей = СтрРазделить(Значение, "=", Ложь);
		Если МассивПолей.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУсловия = Новый Структура("Лево,Право",
			СокрЛП(МассивПолей[0]),
			СокрЛП(МассивПолей[1]));
			
		Результат.Добавить(СтрокаУсловия);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция РазделитьСтроку(знач Строка, знач Разделитель = ",")
	Значения = СтрРазделить(Строка, Разделитель, Ложь);
	
	Результат = Новый Массив;
	Для Каждого Значение Из Значения Цикл
		Результат.Добавить(СокрЛП(Значение));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

Инициализация();

#КонецЕсли

#Если НЕ Сервер Тогда
 	Схема1 = ЭтотОбъект;
	Схема2 = ЭтотОбъект;
#КонецЕсли
