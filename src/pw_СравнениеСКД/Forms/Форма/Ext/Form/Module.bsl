
#Область УправлениеФормой

&НаСервере
Процедура ИнициализацияФормы()
	
	КэшироватьКартинкиНаСервере();
	ЗаполнитьСинонимыНаСервере();
	
	ЗаполнитьОписаниеСхемыНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеФормыНаСервере(Форма)
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы = Форма.Элементы;

	#Область Наборы
	
	//Если ИмяРеквизита = "Реквизиты" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "");
	//	УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "");
	//КонецЕсли;

	#КонецОбласти
	
	#Область Элементы
	
	//Если ИмяРеквизита = "Ответственный" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"Ответственный", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти 
	
	#Область ТабЧасть_Имя
	
	//Если ИмяРеквизита = "ИмяТабличнойЧастиОтветственный" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"ИмяТабличнойЧастиОтветственный", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти
	
	#Область Команды
	
	//Если ИмяРеквизита = "КомандаЗаполнить" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"ТаблицаФормыЗаполнить", "Видимость", НЕ Объект.Проведен);
	//КонецЕсли;

	#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = "") Экспорт
	Если ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Массив") Тогда
		МассивИмен = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаРеквизитов);
	Иначе
		Возврат;
	КонецЕсли;

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Асинх Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ИмяРеквизита = Элемент.Имя;
	
	Результат = Ждать ЗагрузитьФайлАсинх(ЭтотОбъект[ИмяРеквизита]);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизита] = Результат.Файл.ПолноеИмя;
	
	ИмяСхемы = ?(ИмяРеквизита = "ПутьКФайлу1", "Схема1", "Схема2");
	
	Схема = ЭтотОбъект[ИмяСхемы];
	Схема.ИмяФайла		= Результат.Имя;
	Схема.Расширение	= Результат.Расширение;
	Схема.АдресСхемы	= Результат.Хранение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоСравнения

&НаКлиенте
Процедура ДеревоСравненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоСравнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ДеревоСравненияДанные1" Тогда
		Значение = ТекущиеДанные.Данные1;
	ИначеЕсли Поле.Имя = "ДеревоСравненияДанные2" Тогда
		Значение = ТекущиеДанные.Данные2;
	КонецЕсли;
	
	Если ЭтоСтруктура(Значение) Тогда
		СтандартнаяОбработка = Ложь;
		
		Список = Новый СписокЗначений;
		Для Каждого КлючИЗначение Из Значение Цикл
			Список.Добавить(, СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
		КонецЦикла;
		
		Список.ВыбратьЭлементАсинх();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализацияФормы();
	
	УстановитьУсловноеОформлениеФормыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьСравнение(Команда)
	
	//Если НЕ ЭтотОбъект.ПроверитьЗаполнение() Тогда
	//	Возврат;
	//КонецЕсли;
	
	ВыполнитьСравнениеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

&НаСервере
Процедура ЗаполнитьОписаниеСхемыНаСервере()
	
	#Область Таблицы
	НоваяТаблица(ЭтотОбъект, "Наборы"						, НСтр("ru='Набор данных';en='Data set'"));
	НоваяТаблица(ЭтотОбъект, "ИсточникиДанных"				, НСтр("ru='Источник данных';en='Data source'"));
	НоваяТаблица(ЭтотОбъект, "ВычисляемыеПоля"				, НСтр("ru='Вычисляемое поле';en='Calculated field'"));
	НоваяТаблица(ЭтотОбъект, "СвязиНаборов"					, НСтр("ru='Связь наборов';en='Data set link'"));
	НоваяТаблица(ЭтотОбъект, "ПоляИтога"					, НСтр("ru='Поле итога';en='Total field'"));
	НоваяТаблица(ЭтотОбъект, "Параметры"					, НСтр("ru='Параметр';en='Parameter'"));
	НоваяТаблица(ЭтотОбъект, "Макеты"						, НСтр("ru='Макет';en='Template'"));
	НоваяТаблица(ЭтотОбъект, "МакетыПолей"					, НСтр("ru='Макет поля';en='Field template'"));
	НоваяТаблица(ЭтотОбъект, "МакетыГруппировок"			, НСтр("ru='Макет группировки';en='Group template'"));
	НоваяТаблица(ЭтотОбъект, "МакетыЗаголовковГруппировок"	, НСтр("ru='Макет заголовков группировки';en='Group header template'"));
	НоваяТаблица(ЭтотОбъект, "МакетыПолейИтога"				, НСтр("ru='Макет поля итога';en='Total fields template'"));
	НоваяТаблица(ЭтотОбъект, "ВложенныеСхемы"				, НСтр("ru='Вложенная схема компоновки данных';en='Nested data composition schema'"));
	НоваяТаблица(ЭтотОбъект, "ВариантыНастроек"				, НСтр("ru='Вариант настройки';en='Settings variant'"));
	
	НоваяТаблица(ЭтотОбъект, "ПоляНаборов", НСтр("ru='Поле набора';en='Data set field'"), Ложь);
	
	НоваяТаблица(ЭтотОбъект, "ВыраженияУпорядочивания"	, НСтр("ru='Выражение упорядочивания';en='Order expression'"), Ложь);
	НоваяТаблица(ЭтотОбъект, "ОграниченияИспользования"	, НСтр("ru='Ограничение использования';en='Use restriction'"), Ложь);
	НоваяТаблица(ЭтотОбъект, "Оформления"				, НСтр("ru='Оформление';en='Appearance'"), Ложь);
	НоваяТаблица(ЭтотОбъект, "ПараметрыРедактирования"	, НСтр("ru='Параметр редактирования';en='Edit parameter'"), Ложь);
	НоваяТаблица(ЭтотОбъект, "РолиПолей"				, НСтр("ru='Роль';en='Role'"), Ложь);
	#КонецОбласти

	#Область Поиск
	НовыйПоиск(ЭтотОбъект, "Наборы"							, "Имя");
	НовыйПоиск(ЭтотОбъект, "ИсточникиДанных"				, "Имя");
	НовыйПоиск(ЭтотОбъект, "ВычисляемыеПоля"				, "ПутьКДанным;Заголовок");
	НовыйПоиск(ЭтотОбъект, "СвязиНаборов"					, "НаборДанныхИсточник,НаборДанныхПриемник");
	НовыйПоиск(ЭтотОбъект, "ПоляИтога"						, "ПутьКДанным");
	НовыйПоиск(ЭтотОбъект, "Параметры"						, "Имя;Заголовок");
	НовыйПоиск(ЭтотОбъект, "Макеты"							, "Имя");
	НовыйПоиск(ЭтотОбъект, "МакетыПолей"					, "Поле");
	НовыйПоиск(ЭтотОбъект, "МакетыГруппировок"				, "ИмяГруппировки");
	НовыйПоиск(ЭтотОбъект, "МакетыЗаголовковГруппировок"	, "ИмяГруппировки");
	НовыйПоиск(ЭтотОбъект, "МакетыПолейИтога"				, "ИмяГруппировки1,ИмяГруппировки2");
	НовыйПоиск(ЭтотОбъект, "ВложенныеСхемы"					, "Имя;Заголовок");
	НовыйПоиск(ЭтотОбъект, "ВариантыНастроек"				, "Имя");
	
	НовыйПоиск(ЭтотОбъект, "Запросы"		, "Имя");
	НовыйПоиск(ЭтотОбъект, "Объекты"		, "Имя");
	НовыйПоиск(ЭтотОбъект, "Объединения"	, "Имя");
	#КонецОбласти
	
	#Область Шаблоны
	НовыйШаблон(ЭтотОбъект, "Наборы"						, "%1"		, "Имя");
	НовыйШаблон(ЭтотОбъект, "ИсточникиДанных"				, "%1"		, "Имя");
	НовыйШаблон(ЭтотОбъект, "ВычисляемыеПоля"				, "%1 (%2)"	, "ПутьКДанным,Заголовок");
	НовыйШаблон(ЭтотОбъект, "СвязиНаборов"					, "%1-%2"	, "НаборДанныхИсточник,НаборДанныхПриемник");
	НовыйШаблон(ЭтотОбъект, "ПоляИтога"						, "%1"		, "ПутьКДанным");
	НовыйШаблон(ЭтотОбъект, "Параметры"						, "%1 (%2)"	, "Имя,Заголовок");
	НовыйШаблон(ЭтотОбъект, "Макеты"						, "%1"		, "Имя");
	НовыйШаблон(ЭтотОбъект, "МакетыПолей"					, "%1"		, "Поле");
	НовыйШаблон(ЭтотОбъект, "МакетыГруппировок"				, "%1"		, "ИмяГруппировки");
	НовыйШаблон(ЭтотОбъект, "МакетыЗаголовковГруппировок"	, "%1"		, "ИмяГруппировки");
	НовыйШаблон(ЭтотОбъект, "МакетыПолейИтога"				, "%1-%2"	, "ИмяГруппировки1,ИмяГруппировки2");
	НовыйШаблон(ЭтотОбъект, "ВложенныеСхемы"				, "%1"		, "Имя");
	НовыйШаблон(ЭтотОбъект, "ВариантыНастроек"				, "%1"		, "Имя");
	#КонецОбласти
	
	#Область Связи
	НоваяСвязь(ЭтотОбъект, "Наборы"			, "ПоляНаборов"	, "Ключ = КлючНабора");
	НоваяСвязь(ЭтотОбъект, "Объединения"	, "Наборы"		, "Ключ = КлючРодитель");
	
	НоваяСвязь(ЭтотОбъект, "Наборы"			, "Запросы"			, "Ключ = Ключ", "Тип = НаборДанныхЗапросСхемыКомпоновкиДанных"		, Истина);
	НоваяСвязь(ЭтотОбъект, "Наборы"			, "Объекты"			, "Ключ = Ключ", "Тип = НаборДанныхОбъектСхемыКомпоновкиДанных"		, Истина);
	НоваяСвязь(ЭтотОбъект, "Наборы"			, "Объединения"		, "Ключ = Ключ", "Тип = НаборДанныхОбъединениеСхемыКомпоновкиДанных", Истина);
	
	НоваяСвязь(ЭтотОбъект, "ПоляНаборов"	, "ПолеНабора"		, "Ключ = Ключ", "Тип = ПолеНабораДанныхСхемыКомпоновкиДанных"		, Истина);
	НоваяСвязь(ЭтотОбъект, "ПоляНаборов"	, "ПапкаПолейНабора", "Ключ = Ключ", "Тип = ПапкаПолейНабораДанныхСхемыКомпоновкиДанных", Истина);
	НоваяСвязь(ЭтотОбъект, "ПоляНаборов"	, "ВложенныйНабор"	, "Ключ = Ключ", "Тип = ВложенныйНаборДанныхСхемыКомпоновкиДанных"	, Истина);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НоваяТаблица(знач Форма, знач Таблица, знач ИмяСтроки = "", знач Основная = Истина)
	Настройка = НастройкаТаблицы(Форма, Таблица);
	Настройка.ИмяСтроки	= ?(НЕ ЗначениеЗаполнено(ИмяСтроки), Таблица, ИмяСтроки);
	Настройка.Порядок	= Форма.ОписаниеСхемы.Количество();
	Настройка.Основная	= Основная;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура НовыйШаблон(знач Форма, знач Таблица, знач Шаблон, знач Поля)
	Настройка = НастройкаТаблицы(Форма, Таблица);
	Настройка.Шаблон = Шаблон;
	Настройка.ПоляШаблона.Очистить();
	
	Подстроки = СтрРазделить(Поля, ",", Ложь);
	
	Для Каждого ИмяПоля Из Подстроки Цикл
		Настройка.ПоляШаблона.Добавить(СокрЛП(ИмяПоля));
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура НоваяСвязь(знач Форма, знач Таблица1, знач Таблица2, знач Поля, знач Условия = Неопределено, знач ЭтоРеквизиты = Ложь, знач ПолеВладелец = "")
	Настройка = НастройкаТаблицы(Форма, Таблица1);
	
	СтрокаСвязи = Настройка.Связи.Добавить();
	СтрокаСвязи.Таблица			= Таблица2;
	СтрокаСвязи.ЭтоРеквизиты	= ЭтоРеквизиты И НЕ ЗначениеЗаполнено(ПолеВладелец);
	СтрокаСвязи.ЕстьВладелец	= ЗначениеЗаполнено(ПолеВладелец) И НЕ ЭтоРеквизиты;
	СтрокаСвязи.ПолеВладелец	= ПолеВладелец;
	
	МассивПолей = РазобратьУсловия(Поля);
	Для Каждого ДанныеУсловия Из МассивПолей Цикл
		СтрокаПоля = СтрокаСвязи.Поля.Добавить();
		СтрокаПоля.Поле1	= ДанныеУсловия.Поле;
		СтрокаПоля.Поле2	= ДанныеУсловия.Значение;
	КонецЦикла;
	
	Если ЭтоСтруктура(Условия) Тогда
		Для Каждого КлючИЗначение Из Условия Цикл
			СтрокаУсловия = СтрокаСвязи.Условия.Добавить();
			СтрокаУсловия.Поле		= КлючИЗначение.Ключ;
			СтрокаУсловия.Значение	= КлючИЗначение.Значение;
		КонецЦикла;
	ИначеЕсли ЭтоСтрока(Условия) Тогда 
		МассивУсловий = РазобратьУсловия(Условия);
		Для Каждого ДанныеУсловия Из МассивУсловий Цикл
			СтрокаУсловия = СтрокаСвязи.Условия.Добавить();
			СтрокаУсловия.Поле		= ДанныеУсловия.Поле;
			СтрокаУсловия.Значение	= ДанныеУсловия.Значение;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура НовыйПоиск(знач Форма, знач Таблица, знач ПоляПоиска)
	
	Настройка = НастройкаТаблицы(Форма, Таблица);
	
	МассивПолей = СтрРазделить(ПоляПоиска, ";", Ложь);
	Для Каждого Поля Из МассивПолей Цикл
		СтрокаПоиска = Настройка.Поиск.Добавить();
		СтрокаПоиска.Поля = Поля;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция НастройкаТаблицы(знач Форма, знач Таблица)
	Настройка = ПерваяСтрокаТаблицы(Форма.ОписаниеСхемы, Таблица, "Таблица");
	Если Настройка = Неопределено Тогда
		Настройка = Форма.ОписаниеСхемы.Добавить();
		Настройка.Таблица	= Таблица;
	КонецЕсли;
	
	Возврат Настройка;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция РазделТаблицы()
КонецФункции

#КонецОбласти

#Область Сравнение

&НаСервере
Процедура ВыполнитьСравнениеНаСервере()
	ОбъектСхема1 = ЭтотОбъект.РеквизитФормыВЗначение("Схема1");
	ОбъектСхема1.Загрузить();
	ЭтотОбъект.ЗначениеВРеквизитФормы(ОбъектСхема1, "Схема1");
	
	ОбъектСхема2 = ЭтотОбъект.РеквизитФормыВЗначение("Схема2");
	ОбъектСхема2.Загрузить();
	ЭтотОбъект.ЗначениеВРеквизитФормы(ОбъектСхема2, "Схема2");
	
	ОбработкаОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Сравнить(ОбъектСхема1, ОбъектСхема2);
	ЭтотОбъект.ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	//ЭтотОбъект.ТаблицаСравнения.Очистить();
	//
	//СравнитьТаблицыНаСервере(); 
	//
	//ЭтотОбъект.КолСтрокСравнения = ЭтотОбъект.ТаблицаСравнения.Количество();
	//
	//ВыполнитьСравнениеРазделовНаСервере();
КонецПроцедуры

&НаСервере 
Процедура СравнитьТаблицыНаСервере()
	
	ОтборСтрок	= Новый Структура("Основная", Истина);
	МассивСтрок	= ЭтотОбъект.ОписаниеСхемы.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		ОтборСиноним	= Новый Структура("ИмяТабЧасти,ЭтоТабЧасть,ЭтоРеквизит", СтрокаТаблицы.Таблица, Истина, Ложь);
		СтрокаСиноним	= ПерваяСтрокаТаблицы(ЭтотОбъект.Синонимы, ОтборСиноним);
		Если СтрокаСиноним = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = СтрокаТаблицы.Таблица;
		
		Таблица1 = ТаблицаСхемыНаСервере(ЭтотОбъект.Схема1, ИмяТаблицы, Новый Структура("КлючРодитель", ЭтотОбъект.Схема1.Key));
		Таблица2 = ТаблицаСхемыНаСервере(ЭтотОбъект.Схема2, ИмяТаблицы, Новый Структура("КлючРодитель", ЭтотОбъект.Схема2.Key));
		
		СтрокаСравнения = ЭтотОбъект.ТаблицаСравнения.Добавить();
		СтрокаСравнения.Родитель			= ПустойКлюч();
		СтрокаСравнения.Ключ				= НовыйКлюч(ИмяТаблицы);
		СтрокаСравнения.Имя					= ИмяТаблицы;
		СтрокаСравнения.Представление		= СтрокаСиноним.Синоним;
		СтрокаСравнения.Картинка			= Неопределено; // TODO
		СтрокаСравнения.ЭтоГруппа			= Истина;
		СтрокаСравнения.ЭтоСтрока			= Ложь;
		СтрокаСравнения.Таблица				= ИмяТаблицы;
		СтрокаСравнения.Строка1				= 0;
		СтрокаСравнения.Строка2				= 0;
		СтрокаСравнения.ПолноеИмя			= ИмяТаблицы;
		СтрокаСравнения.Значение1			= Неопределено;
		СтрокаСравнения.Значение2			= Неопределено;
		СтрокаСравнения.КартинкаРазличия	= Неопределено; // TODO
		
		СравнитьТаблицуНаСервере(СтрокаТаблицы.Таблица, СтрокаСравнения.Родитель, Таблица1, Таблица2);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура СравнитьТаблицуНаСервере(знач ИмяТаблицы, знач КлючРодитель, знач Таблица1, знач Таблица2)
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	
	Для Каждого Строка1 Из Таблица1 Цикл
		Строка1._Обработано = Истина;
		
		Строка2 = НайтиСтрокуТаблицыНаСервере(ИмяТаблицы, Таблица2, Строка1);
		Если Строка2 <> Неопределено Тогда
			Строка2._Обработано = Истина;
		КонецЕсли;
		
		ИмяСвойства = СтрШаблон("%1[%2]", ИмяТаблицы, Формат(Строка1.НомерСтроки, "ЧН=0; ЧГ="));
		ПолноеИмя	= СтрШаблон("%1.Строка", ИмяТаблицы);
		
		СтрокаСравнения = ЭтотОбъект.ТаблицаСравнения.Добавить();
		СтрокаСравнения.Родитель			= КлючРодитель;
		СтрокаСравнения.Ключ				= НовыйКлюч("Схема1." + ИмяСвойства);
		СтрокаСравнения.Имя					= ИмяСвойства;
		СтрокаСравнения.Представление		= Настройка.ИмяСтроки;
		СтрокаСравнения.Картинка			= Неопределено; // TODO
		СтрокаСравнения.ЭтоГруппа			= Истина;
		СтрокаСравнения.ЭтоСтрока			= Истина;
		СтрокаСравнения.Таблица				= ИмяТаблицы;
		СтрокаСравнения.Строка1				= Строка1.НомерСтроки;
		СтрокаСравнения.Строка2				= ?(Строка2 = Неопределено, 0, Строка2.НомерСтроки);
		СтрокаСравнения.ПолноеИмя			= ПолноеИмя;
		СтрокаСравнения.Значение1			= ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка1);
		СтрокаСравнения.Значение2			= ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка2);
		СтрокаСравнения.КартинкаРазличия	= Неопределено; // TODO
		
		СравнитьСтрокуНаСервере(ИмяТаблицы, СтрокаСравнения.Ключ, Строка1, Строка2);
	КонецЦикла;
	
	ОтборСтрок	= Новый Структура("_Обработано", Ложь);
	МассивСтрок	= Таблица2.НайтиСтроки(ОтборСтрок);
	
	Для Каждого Строка2 Из МассивСтрок Цикл
		Строка1 = Неопределено;
		
		ИмяСвойства = СтрШаблон("Схема2.%1[%2]", ИмяТаблицы, Формат(Строка2.НомерСтроки, "ЧГ="));
		ПолноеИмя	= СтрШаблон("%1.Строка", ИмяТаблицы);
		
		СтрокаСравнения = ЭтотОбъект.ТаблицаСравнения.Добавить();
		СтрокаСравнения.Родитель			= КлючРодитель;
		СтрокаСравнения.Ключ				= НовыйКлюч("Схема2." + ИмяСвойства);
		СтрокаСравнения.Имя					= ИмяСвойства;
		СтрокаСравнения.Представление		= Настройка.ИмяСтроки;
		СтрокаСравнения.Картинка			= Неопределено; // TODO
		СтрокаСравнения.ЭтоГруппа			= Истина;
		СтрокаСравнения.ЭтоСтрока			= Истина;
		СтрокаСравнения.Таблица				= ИмяТаблицы;
		СтрокаСравнения.Строка1				= 0;
		СтрокаСравнения.Строка2				= Строка2.НомерСтроки;
		СтрокаСравнения.ПолноеИмя			= ПолноеИмя;
		СтрокаСравнения.Значение1			= ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка1);
		СтрокаСравнения.Значение2			= ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка2);
		СтрокаСравнения.КартинкаРазличия	= Неопределено; // TODO
		
		СравнитьСтрокуНаСервере(ИмяТаблицы, СтрокаСравнения.Ключ, Строка1, Строка2);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура СравнитьСтрокуНаСервере(знач ИмяТаблицы, знач КлючРодитель, знач Строка1, знач Строка2)
	Если Строка1 = Неопределено И Строка2 = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок	= Новый Структура("ИмяТабЧасти,ЭтоТабЧасть,ЭтоРеквизит,Пропустить", ИмяТаблицы, Истина, Истина, Ложь);
	МассивСтрок	= ЭтотОбъект.Синонимы.НайтиСтроки(ОтборСтрок);
	
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	
	Для Каждого СтрокаСиноним Из МассивСтрок Цикл
		ШаблонСвойства = ?(Строка1 = Неопределено, "Схема2", "Схема1") + ".%1[%2].%3";
		СтрокаСвойства = ?(Строка1 = Неопределено, Строка2, Строка1);
		
		ИмяСвойства = СтрШаблон(ШаблонСвойства, ИмяТаблицы, Формат(СтрокаСвойства.НомерСтроки, "ЧГ="), СтрокаСиноним.Имя);
		ПолноеИмя	= СтрШаблон("%1.Строка.%2", ИмяТаблицы, СтрокаСиноним.Имя);
		
		СтрокаСравнения = ЭтотОбъект.ТаблицаСравнения.Добавить();
		СтрокаСравнения.Родитель			= КлючРодитель;
		СтрокаСравнения.Ключ				= НовыйКлюч(ИмяСвойства);
		СтрокаСравнения.Имя					= ИмяСвойства;
		СтрокаСравнения.Представление		= СтрокаСиноним.Синоним;
		СтрокаСравнения.Картинка			= Неопределено; // TODO
		СтрокаСравнения.ЭтоГруппа			= Истина;
		СтрокаСравнения.ЭтоСтрока			= Истина;
		СтрокаСравнения.ЭтоРеквизит			= Истина;
		СтрокаСравнения.Таблица				= ИмяТаблицы;
		СтрокаСравнения.Строка1				= ?(Строка1 = Неопределено, 0, Строка1.НомерСтроки);
		СтрокаСравнения.Строка2				= ?(Строка2 = Неопределено, 0, Строка2.НомерСтроки);
		СтрокаСравнения.ПолноеИмя			= ПолноеИмя;
		СтрокаСравнения.Значение1			= ?(Строка1 = Неопределено, Неопределено, Строка1[СтрокаСиноним.Имя]);
		СтрокаСравнения.Значение2			= ?(Строка2 = Неопределено, Неопределено, Строка2[СтрокаСиноним.Имя]);
		СтрокаСравнения.КартинкаРазличия	= Неопределено; // TODO
		
		СравнитьПодчиненныеТаблицыНаСервере(ИмяТаблицы, СтрокаСравнения.Ключ, СтрокаСиноним.Имя, Строка1, Строка2);
	КонецЦикла;
	
	СравнитьВложенныеРеквизитыНаСервере(ИмяТаблицы, КлючРодитель, Строка1, Строка2);
	СравнитьВложенныеТаблицыНаСервере(ИмяТаблицы, КлючРодитель, Строка1, Строка2);
КонецПроцедуры

&НаСервере 
Процедура СравнитьВложенныеРеквизитыНаСервере(знач ИмяТаблицы, знач КлючРодитель, знач Строка1, знач Строка2)
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	
	ОтборСтрок	= Новый Структура("ЕстьВладелец,ЭтоРеквизиты", Ложь, Истина);
	МассивСтрок	= Настройка.Связи.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаСвязи Из МассивСтрок Цикл
		Отборы = ПодготовитьОтборыСвязиПоСтрокам(ИмяТаблицы, СтрокаСвязи, Строка1, Строка2);
		
		ВложеннаяСтрока1 = ПерваяСтрокаТаблицы(ЭтотОбъект.Схема1[СтрокаСвязи.Таблица], Отборы.Отбор1);
		ВложеннаяСтрока2 = ПерваяСтрокаТаблицы(ЭтотОбъект.Схема2[СтрокаСвязи.Таблица], Отборы.Отбор2);
		
		СравнитьСтрокуНаСервере(СтрокаСвязи.Таблица, КлючРодитель, ВложеннаяСтрока1, ВложеннаяСтрока2); 
	КонецЦикла;	
КонецПроцедуры

&НаСервере 
Процедура СравнитьВложенныеТаблицыНаСервере(знач ИмяТаблицы, знач КлючРодитель, знач Строка1, знач Строка2)
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	
	ОтборСтрок	= Новый Структура("ЕстьВладелец,ЭтоРеквизиты", Ложь, Ложь);
	МассивСтрок	= Настройка.Связи.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаСвязи Из МассивСтрок Цикл
		ОтборСиноним	= Новый Структура("ИмяТабЧасти,ЭтоТабЧасть,ЭтоРеквизит", СтрокаСвязи.Таблица, Истина, Ложь);
		СтрокаСиноним	= ПерваяСтрокаТаблицы(ЭтотОбъект.Синонимы, ОтборСиноним);
		Если СтрокаСиноним = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Отборы = ПодготовитьОтборыСвязиПоСтрокам(ИмяТаблицы, СтрокаСвязи, Строка1, Строка2);
		
		Таблица1	= ТаблицаСхемыНаСервере(ЭтотОбъект.Схема1, СтрокаСвязи.Таблица, Отборы.Отбор1);
		Таблица2	= ТаблицаСхемыНаСервере(ЭтотОбъект.Схема2, СтрокаСвязи.Таблица, Отборы.Отбор2);
		
		ИмяСвойства = СтрШаблон("%1.%2", ИмяТаблицы, СтрокаСвязи.Таблица);
		
		СтрокаСравнения = ЭтотОбъект.ТаблицаСравнения.Добавить();
		СтрокаСравнения.Родитель			= КлючРодитель;
		СтрокаСравнения.Ключ				= НовыйКлюч(ИмяСвойства);
		СтрокаСравнения.Имя					= ИмяСвойства;
		СтрокаСравнения.Представление		= СтрокаСиноним.Синоним;
		СтрокаСравнения.Картинка			= Неопределено; // TODO
		СтрокаСравнения.ЭтоГруппа			= Истина;
		СтрокаСравнения.ЭтоСтрока			= Ложь;
		СтрокаСравнения.Таблица				= СтрокаСвязи.Таблица;
		СтрокаСравнения.Строка1				= 0;
		СтрокаСравнения.Строка2				= 0;
		СтрокаСравнения.ПолноеИмя			= ИмяСвойства;
		СтрокаСравнения.Значение1			= Неопределено;
		СтрокаСравнения.Значение2			= Неопределено;
		СтрокаСравнения.КартинкаРазличия	= Неопределено; // TODO
		
		СравнитьТаблицуНаСервере(СтрокаСвязи.Таблица, СтрокаСравнения.Ключ, Таблица1, Таблица2); 
	КонецЦикла;	
КонецПроцедуры

&НаСервере 
Процедура СравнитьПодчиненныеТаблицыНаСервере(знач ИмяТаблицы, знач КлючРодитель, знач ИмяСвойства, знач Строка1, знач Строка2)
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	
	ОтборСтрок	= Новый Структура("ЕстьВладелец,ПолеВладелец,ЭтоРеквизиты", Истина, ИмяСвойства, Ложь);
	МассивСтрок	= Настройка.Связи.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаСвязи Из МассивСтрок Цикл
		ОтборСиноним	= Новый Структура("ИмяТабЧасти,ЭтоТабЧасть,ЭтоРеквизит", СтрокаСвязи.Таблица, Истина, Ложь);
		СтрокаСиноним	= ПерваяСтрокаТаблицы(ЭтотОбъект.Синонимы, ОтборСиноним);
		Если СтрокаСиноним = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Отборы = ПодготовитьОтборыСвязиПоСтрокам(ИмяТаблицы, СтрокаСвязи, Строка1, Строка2);
		
		Таблица1	= ТаблицаСхемыНаСервере(ЭтотОбъект.Схема1, СтрокаСвязи.Таблица, Отборы.Отбор1);
		Таблица2	= ТаблицаСхемыНаСервере(ЭтотОбъект.Схема2, СтрокаСвязи.Таблица, Отборы.Отбор2);
		
		ИмяСвойства = СтрШаблон("%1.%2", ИмяТаблицы, СтрокаСвязи.Таблица);
		
		СтрокаСравнения = ЭтотОбъект.ТаблицаСравнения.Добавить();
		СтрокаСравнения.Родитель			= КлючРодитель;
		СтрокаСравнения.Ключ				= НовыйКлюч(ИмяСвойства);
		СтрокаСравнения.Имя					= ИмяСвойства;
		СтрокаСравнения.Представление		= СтрокаСиноним.Синоним;
		СтрокаСравнения.Картинка			= Неопределено; // TODO
		СтрокаСравнения.ЭтоГруппа			= Истина;
		СтрокаСравнения.ЭтоСтрока			= Ложь;
		СтрокаСравнения.Таблица				= СтрокаСвязи.Таблица;
		СтрокаСравнения.Строка1				= 0;
		СтрокаСравнения.Строка2				= 0;
		СтрокаСравнения.ПолноеИмя			= ИмяСвойства;
		СтрокаСравнения.Значение1			= Неопределено;
		СтрокаСравнения.Значение2			= Неопределено;
		СтрокаСравнения.КартинкаРазличия	= Неопределено; // TODO
		
		СравнитьТаблицуНаСервере(СтрокаСвязи.Таблица, СтрокаСравнения.Ключ, Таблица1, Таблица2); 
	КонецЦикла;	
КонецПроцедуры

&НаСервере 
Функция ПодготовитьОтборыСвязиПоСтрокам(знач ИмяТаблицы, знач СтрокаСвязи, знач Строка1, знач Строка2)
	Отбор1	= Новый Структура;
	Отбор2	= Новый Структура;
	
	Результат = Новый Структура("Отбор1, Отбор2", Отбор1, Отбор2);
	
	Для Каждого СтрокаПоля Из СтрокаСвязи.Поля Цикл
		Если Строка1 <> Неопределено Тогда
			Отбор1.Вставить(СтрокаПоля.Поле2, Строка1[СтрокаПоля.Поле1]);
		КонецЕсли;
		Если Строка2 <> Неопределено Тогда
			Отбор2.Вставить(СтрокаПоля.Поле2, Строка2[СтрокаПоля.Поле1]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции







&НаСервере 
Процедура ВыполнитьСравнениеРазделовНаСервере()
	
	ОтборСтрок	= Новый Структура("Основная", Истина);
	МассивСтрок	= ЭтотОбъект.ОписаниеСхемы.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		ОтборСиноним	= Новый Структура("ИмяТабЧасти,ЭтоТабЧасть,ЭтоРеквизит", СтрокаТаблицы.Таблица, Истина, Ложь);
		СтрокаСиноним	= ПерваяСтрокаТаблицы(ЭтотОбъект.Синонимы, ОтборСиноним);
		Если СтрокаСиноним = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица1 = ТаблицаСхемыНаСервере(ЭтотОбъект.Схема1, СтрокаТаблицы.Таблица, ЭтотОбъект.Схема1.Key);
		Таблица2 = ТаблицаСхемыНаСервере(ЭтотОбъект.Схема2, СтрокаТаблицы.Таблица, ЭтотОбъект.Схема2.Key);
		
		СтрокаУзел = ЭтотОбъект.ДеревоСравнения.ПолучитьЭлементы().Добавить();
		СтрокаУзел.ИмяСвойства		= СтрокаСиноним.Имя;
		СтрокаУзел.Представление	= СтрокаСиноним.Синоним;
		СтрокаУзел.Картинка			= Неопределено; // TODO
		СтрокаУзел.ЭтоГруппа		= Истина;
		СтрокаУзел.ИмяТаблицы		= СтрокаСиноним.Имя;
		СтрокаУзел.ПолноеИмя		= СтрокаСиноним.Имя;
		СтрокаУзел.ЗначениеМакет1	= СтрШаблон(НСтр("ru='Строк: %1';en='Rows: %1'"), Формат(Таблица1.Количество(), "ЧН=0; ЧГ="));
		СтрокаУзел.ЗначениеМакет2	= СтрШаблон(НСтр("ru='Строк: %1';en='Rows: %1'"), Формат(Таблица2.Количество(), "ЧН=0; ЧГ="));
		СтрокаУзел.КартинкаРазличия	= Неопределено; // TODO
		СтрокаУзел.Данные1			= Новый Структура("КлючРодитель", ЭтотОбъект.Схема1.Key);
		СтрокаУзел.Данные2			= Новый Структура("КлючРодитель", ЭтотОбъект.Схема2.Key);
		
		ВыполнитьСравнениеТаблицыНаСервере(СтрокаУзел, СтрокаТаблицы.Таблица, Таблица1, Таблица2);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьСравнениеТаблицыНаСервере(знач СтрокаВладелец, знач ИмяТаблицы, знач Таблица1, знач Таблица2)
	СтрокаВладелец.ПолучитьЭлементы().Очистить();
	
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	
	Для Каждого Строка1 Из Таблица1 Цикл
		Строка1._Обработано = Истина;
		
		Строка2 = НайтиСтрокуТаблицыНаСервере(ИмяТаблицы, Таблица2, Строка1, СтрокаВладелец.Данные2);
		
		СтрокаДерева = СтрокаВладелец.ПолучитьЭлементы().Добавить();
		СтрокаДерева.ИмяСвойства		= "Row";
		СтрокаДерева.Представление		= Настройка.ИмяСтроки;
		СтрокаДерева.ЭтоГруппа			= Истина;
		СтрокаДерева.ЭтоСтрокаТаблицы	= Истина;
		СтрокаДерева.ИмяТаблицы			= Настройка.Таблица;
		СтрокаДерева.Картинка           = КартинкаИзКэша(ЭтотОбъект.КэшКартинки, Строка1.Картинка);
		СтрокаДерева.ПолноеИмя			= СтрШаблон("%1[%2]", Настройка.Таблица, Формат(Строка1.НомерСтроки, "ЧН=0; ЧГ="));
		СтрокаДерева.ЗначениеМакет1		= ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка1);
		СтрокаДерева.ЗначениеМакет2		= ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка2);
		СтрокаДерева.КартинкаРазличия	= Неопределено; // TODO
		СтрокаДерева.Данные1			= СоздатьДанныеСтроки(ЭтотОбъект, ИмяТаблицы, Строка1);
		СтрокаДерева.Данные2			= СоздатьДанныеСтроки(ЭтотОбъект, ИмяТаблицы, Строка2);
		
		ВыполнитьСравнениеСтрокиНаСервере(СтрокаДерева, ИмяТаблицы, Строка1, Строка2);
		
		//ВыполнитьСравнениеТаблицыНаСервере(СтрокаДерева, СтрокаДерева.ИмяТаблицы, Строка1, Строка2);
		//ВыполнитьСравнениеСвязанныхТаблицНаСервере(СтрокаДерева, Строка1, Строка2);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьСравнениеСтрокиНаСервере(знач СтрокаВладелец, знач ИмяТаблицы, знач Строка1, знач Строка2)
	Если Строка1 = Неопределено И Строка2 = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок	= Новый Структура("ИмяТабЧасти,ЭтоТабЧасть,ЭтоРеквизит,Пропустить", ИмяТаблицы, Истина, Истина, Ложь);
	МассивСтрок	= ЭтотОбъект.Синонимы.НайтиСтроки(ОтборСтрок);
	
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	
	Для Каждого СтрокаСиноним Из МассивСтрок Цикл
		СтрокаДерева = СтрокаВладелец.ПолучитьЭлементы().Добавить();
		СтрокаДерева.ИмяСвойства		= СтрокаСиноним.Имя;
		СтрокаДерева.Представление		= СтрокаСиноним.Синоним;
		СтрокаДерева.ИмяТаблицы			= Настройка.Таблица;
		СтрокаДерева.Картинка           = Неопределено; // TODO
		СтрокаДерева.ПолноеИмя			= СтрШаблон("%1.%2", СтрокаВладелец.ПолноеИмя, СтрокаСиноним.Имя);
		СтрокаДерева.ЗначениеМакет1		= ?(Строка1 = Неопределено, Неопределено, Строка1[СтрокаСиноним.Имя]); //ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка1);
		СтрокаДерева.ЗначениеМакет2		= ?(Строка2 = Неопределено, Неопределено, Строка2[СтрокаСиноним.Имя]); //ПредставлениеСтроки(ЭтотОбъект, ИмяТаблицы, Строка2);
		СтрокаДерева.КартинкаРазличия	= Неопределено; // TODO
		СтрокаДерева.Данные1			= Неопределено; // TODO
		СтрокаДерева.Данные2			= Неопределено; // TODO
	КонецЦикла;
	
	// дополнительные реквизиты из связи
	ОтборСтрок	= Новый Структура("ЭтоРеквизиты", Истина);
	МассивСтрок	= Настройка.Связи.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаСвязи Из МассивСтрок Цикл
		Отбор1 = Новый Структура;
		Отбор2 = Новый Структура;
		Для Каждого ПоляСвязи Из СтрокаСвязи.Поля Цикл
			Если Строка1 <> Неопределено Тогда
				Отбор1.Вставить(ПоляСвязи.Поле2, Строка1[ПоляСвязи.Поле1]);
			КонецЕсли;
			Если Строка2 <> Неопределено Тогда
				Отбор2.Вставить(ПоляСвязи.Поле2, Строка2[ПоляСвязи.Поле1]);
			КонецЕсли;
		КонецЦикла;
		
		Связь1 = ПерваяСтрокаТаблицы(ЭтотОбъект.Схема1[СтрокаСвязи.Таблица], Отбор1);
		Связь2 = ПерваяСтрокаТаблицы(ЭтотОбъект.Схема2[СтрокаСвязи.Таблица], Отбор2);
		
		ВыполнитьСравнениеСтрокиНаСервере(СтрокаВладелец, СтрокаСвязи.Таблица, Связь1, Связь2);
	КонецЦикла;
	
	// TODO
	// дополнительные таблицы из связи
	
КонецПроцедуры

&НаСервере 
Функция НайтиСтрокуТаблицыНаСервере(знач ИмяТаблицы, знач Таблица2, знач Строка1, знач Данные = Неопределено)
	Настройка = НастройкаТаблицы(ЭтотОбъект, ИмяТаблицы);
	Если Настройка.Поиск.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭтоСтруктура(Данные) Тогда 
		Данные = Новый Структура;
	КонецЕсли;
	
	Для Каждого СтрокаПолей Из Настройка.Поиск Цикл
		ОтборСтрок = Новый Структура(СтрокаПолей.Поля);
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка1);
		Для Каждого КлючИЗначение Из Данные Цикл
			ОтборСтрок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ОтборСтрок.Вставить("_Обработано", Ложь);
		
		Строка2 = ПерваяСтрокаТаблицы(Таблица2, ОтборСтрок);
		Если Строка2 <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Строка2;
КонецФункции

#КонецОбласти

#Область РаботаСКлючами

&НаКлиентеНаСервереБезКонтекста 
Функция НовыйКлюч(знач Значение = Неопределено) Экспорт
	Если Значение = Неопределено Тогда
		Возврат Строка(Новый УникальныйИдентификатор);
	Иначе 
		Возврат КлючХешСуммы(ХешСуммаНаСервере(Значение));
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПустойКлюч() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция КлючЗаполнен(знач Значение) Экспорт
	Возврат ЭтоКлюч(Значение) 
		И Значение <> ПустойКлюч();
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоКлюч(знач Значение) Экспорт
	Возврат ТипЗнч(Значение) = Тип("Строка")
		И НЕ ПустаяСтрока(Значение)
		И ЭтоУникальныйИдентификатор(Значение);
КонецФункции

&НаСервереБезКонтекста 
Функция КлючХешСуммы(знач Значение) Экспорт
	Возврат НРег(СтрШаблон("%1-%2-%3-%4-%5",
		Сред(Значение, 1, 8),
		Сред(Значение, 9, 4),
		Сред(Значение, 13, 4),
		Сред(Значение, 17, 4),
		Сред(Значение, 21)));
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

&НаКлиенте 
Асинх Функция ЗагрузитьФайлАсинх(знач ПутьКФайлу)
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(
		НСтр("ru='Выберите файл схемы';en='Select schema file'"),
		Ложь,
		ФильтрФайловСхемыКомпоновкиДанных());
	
	ОписаниеФайла = Ждать ПоместитьФайлНаСерверАсинх(,,,
		ПараметрыДиалога,
		ЭтотОбъект.УникальныйИдентификатор);
		
	Если ОписаниеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Хранение,Имя,Расширение,Размер,Файл",
		ОписаниеФайла.Адрес,
		ОписаниеФайла.СсылкаНаФайл.Имя,
		ОписаниеФайла.СсылкаНаФайл.Расширение,
		ОписаниеФайла.СсылкаНаФайл.Размер(),
		ОписаниеФайла.СсылкаНаФайл.Файл);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ФильтрФайловВсеФайлы(знач Расширения = "")
	Расширения = СокрЛП(Расширения);
	Если НЕ ЗначениеЗаполнено(Расширения) Тогда
		Расширения = "*.*";
	КонецЕсли;
	
	Если НЕ СтрНачинаетсяС(Расширения, "|") Тогда
		Расширения = "|" + Расширения;
	КонецЕсли;
	
	Возврат НСтр("ru='Все файлы ';en='All files '") + Расширения;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ФильтрФайловXML() Экспорт
	Возврат НСтр("ru='XML схема';en='XML schema'") + " (*.xml)|*.xml";
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ФильтрФайловВнешнийОтчет() Экспорт
	Возврат НСтр("ru='Внешний отчет';en='External report'") + " (*.erf)|*.erf'";
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ФильтрФайловСхемыКомпоновкиДанных() Экспорт
	Варианты = Новый Массив;
	Варианты.Добавить(ФильтрФайловВсеФайлы("*.xml;*.erf"));
	Варианты.Добавить(ФильтрФайловXML());
	Варианты.Добавить(ФильтрФайловВнешнийОтчет());
	
	Возврат СтрСоединить(Варианты, "|");
КонецФункции

#КонецОбласти

#Область РаботаСКартинками

&НаКлиентеНаСервереБезКонтекста 
Функция КартинкаИзКэша(знач Кэш, знач Имя)
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Элемент = Кэш.НайтиПоЗначению(Имя);
	Если Элемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Элемент.Картинка;
КонецФункции

&НаСервере 
Процедура КэшироватьКартинкиНаСервере()
	
	ЭтотОбъект.КэшКартинки.Очистить();
	
	ОбработкаОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Схема1");
	Для Каждого МетаМакет Из ОбработкаОбъект.Метаданные().Макеты Цикл
		Если НЕ МетаМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Данные 		= ОбработкаОбъект.ПолучитьМакет(МетаМакет.Имя);
		Картинка	= Новый Картинка(Данные, Истина);
		
		ЭтотОбъект.КэшКартинки.Добавить(МетаМакет.Имя, МетаМакет.Синоним,, Картинка);
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область Синонимы

&НаКлиентеНаСервереБезКонтекста 
Функция СинонимРеквизита(знач Форма, знач ПутьРеквизита)
	ОтборСтрок	= Новый Структура("ПолноеИмя", ПутьРеквизита);
	МассивСтрок	= Форма.Синонимы.НайтиСтроки(ОтборСтрок);
	
	Возврат ?(МассивСтрок.Количество() = 0, ПутьРеквизита, МассивСтрок[0].Синоним);
КонецФункции

&НаСервере 
Процедура ЗаполнитьСинонимыНаСервере()
	ОбработкаОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Схема1");
	МетаОбработка	= ОбработкаОбъект.Метаданные();
	
	Счетчик = 0;
	Для Каждого МетаРеквизит Из МетаОбработка.Реквизиты Цикл
		Счетчик = Счетчик + 1;
		
		СтрокаЗаписи = ЭтотОбъект.Синонимы.Добавить();
		СтрокаЗаписи.Имя				= МетаРеквизит.Имя;
		СтрокаЗаписи.Синоним			= МетаРеквизит.Представление();
		СтрокаЗаписи.ПолноеИмя			= МетаРеквизит.Имя;
		СтрокаЗаписи.ЭтоРеквизит		= Истина;
		СтрокаЗаписи.Порядок			= Счетчик;
		СтрокаЗаписи.МногострочныйРежим	= МетаРеквизит.МногострочныйРежим;
		СтрокаЗаписи.Пропустить			= (МетаРеквизит.Комментарий = "skip");
	КонецЦикла;
	
	Счетчик = 0;
	Для Каждого МетаТабЧасть Из МетаОбработка.ТабличныеЧасти Цикл
		Счетчик = Счетчик + 1;
		
		СтрокаЗаписи = ЭтотОбъект.Синонимы.Добавить();
		СтрокаЗаписи.Имя			= МетаТабЧасть.Имя;
		СтрокаЗаписи.Синоним		= МетаТабЧасть.Представление();
		СтрокаЗаписи.ПолноеИмя		= МетаТабЧасть.Имя;
		СтрокаЗаписи.ЭтоТабЧасть	= Истина;
		СтрокаЗаписи.ИмяТабЧасти	= МетаТабЧасть.Имя;
		СтрокаЗаписи.Порядок		= Счетчик;
		СтрокаЗаписи.Пропустить		= (МетаТабЧасть.Комментарий = "skip");
	
		ПрефиксТЧ = МетаТабЧасть.Имя + ".";
		
		Счетчик0 = 0;
		Для Каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
			Счетчик0 = Счетчик0 + 1;
			
			СтрокаЗаписи = ЭтотОбъект.Синонимы.Добавить();
			СтрокаЗаписи.Имя				= МетаРеквизит.Имя;
			СтрокаЗаписи.Синоним			= МетаРеквизит.Представление();
			СтрокаЗаписи.ПолноеИмя			= ПрефиксТЧ + МетаРеквизит.Имя;
			СтрокаЗаписи.ИмяТабЧасти		= МетаТабЧасть.Имя;
			СтрокаЗаписи.ЭтоТабЧасть		= Истина;
			СтрокаЗаписи.ЭтоРеквизит		= Истина;
			СтрокаЗаписи.Порядок			= Счетчик0;
			СтрокаЗаписи.МногострочныйРежим	= МетаРеквизит.МногострочныйРежим;
			СтрокаЗаписи.Пропустить			= (МетаРеквизит.Комментарий = "skip");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоУникальныйИдентификатор(Знач Значение)
	
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Позиция = 1 По СтрДлина(Значение) Цикл
		Если КодСимвола(Шаблон, Позиция) = 88 // X
			И ((КодСимвола(Значение, Позиция) < 48 Или КодСимвола(Значение, Позиция) > 57) // 0..9
			И (КодСимвола(Значение, Позиция) < 97 Или КодСимвола(Значение, Позиция) > 102) // a..f
			И (КодСимвола(Значение, Позиция) < 65 Или КодСимвола(Значение, Позиция) > 70)) // A..F
			Или КодСимвола(Шаблон, Позиция) = 45 И КодСимвола(Значение, Позиция) <> 45 Тогда // -
				Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста 
Функция ХешСуммаНаСервере(Знач Данные, Знач Алгоритм = Неопределено)
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ЗначениеВСтрокуXMLНаСервере(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);
	
	Если ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("ДвоичныеДанные") Тогда 
		Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	ИначеЕсли ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("Число") Тогда
		Результат = Формат(ХешированиеДанных.ХешСумма, "ЧГ=");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ЗначениеВСтрокуXMLНаСервере(Значение)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста 
Функция ПредставлениеСтроки(знач Форма, знач ИмяТаблицы, знач СтрокаТаблицы)
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Настройка = НастройкаТаблицы(Форма, ИмяТаблицы);
	Если НЕ ЗначениеЗаполнено(Настройка.Шаблон) ИЛИ Настройка.ПоляШаблона.Количество() = 0 Тогда
		Возврат СтрокаТаблицы.Ключ;
	КонецЕсли;
	
	Значения = Новый Массив(10);
	
	Индекс = 0;
	Для Каждого ЭлементСписка Из Настройка.ПоляШаблона Цикл
		ИмяПоля = ЭлементСписка.Значение;
		Значения[Индекс] = СтрокаТаблицы[ИмяПоля];
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат СтрШаблон(Настройка.Шаблон, Значения[0], Значения[1], Значения[2], Значения[3],
		Значения[4], Значения[5], Значения[6], Значения[7], Значения[8], Значения[9]);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СоздатьДанныеСтроки(знач Форма, знач ИмяТаблицы, знач СтрокаТаблицы)
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройка = НастройкаТаблицы(Форма, ИмяТаблицы);
	Если Настройка.Связи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Для Каждого СтрокаСвязи Из Настройка.Связи Цикл
		Для Каждого СтрокаПоля ИЗ СтрокаСвязи.Поля Цикл
			Если Результат.Свойство(СтрокаПоля.Поле1) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(СтрокаПоля.Поле1);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицы);
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПерваяСтрокаТаблицы(знач ТаблицаДанных, знач Значение, знач Ключ = "")
	Если ЭтоСтруктура(Значение) И Значение.Количество() <> 0 Тогда
		ОтборСтрок	= Значение;
	ИначеЕсли ЗначениеЗаполнено(Ключ) Тогда 
		ОтборСтрок	= Новый Структура(Ключ, Значение);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок	= ТаблицаДанных.НайтиСтроки(ОтборСтрок);
	Возврат ?(МассивСтрок.Количество() = 0, Неопределено, МассивСтрок[0]);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоСтруктура(знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Структура")
		ИЛИ ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура");
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоСтрока(знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Строка");
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция РазобратьУсловия(знач Значение)
	Результат = Новый Массив;
	
	Условия = СтрРазделить(Значение, "&", Ложь);
	Для Каждого СтрокаУсловия Из Условия Цикл
		СтрокаУсловия = СокрЛП(СтрокаУсловия);
		Поля = СтрРазделить(СтрокаУсловия, "=", Ложь);
		Если Поля.Количество() <> 2 Тогда 
			Продолжить;
		КонецЕсли;
		
		Условие = Новый Структура("Поле,Значение", СокрЛП(Поля[0]), СокрЛП(Поля[1]));
		Результат.Добавить(Условие);
	КонецЦикла;
	
    Возврат Результат;
КонецФункции

&НаСервереБезКонтекста 
Функция ТаблицаСхемыНаСервере(знач Схема, знач ИмяТаблицы, знач Отбор = Неопределено)
	Если ЭтоСтруктура(Отбор) Тогда
		Результат = Схема[ИмяТаблицы].Выгрузить(Отбор);
	Иначе 
		Результат = Схема[ИмяТаблицы].Выгрузить();
	КонецЕсли;
	
	Результат.Колонки.Добавить("_Обработано", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
КонецФункции

#КонецОбласти
